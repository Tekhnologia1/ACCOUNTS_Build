{"version":3,"file":"static/js/8927.220ee4ba.chunk.js","mappings":"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","sources":["api/APIURL.js","views/firm_user/Transfers/User_MakeTransfer.js","../node_modules/@restart/ui/esm/Button.js","../node_modules/react-bootstrap/esm/Button.js"],"sourcesContent":["export const api_url = 'http://20.235.178.6:3007';","import React, { useContext, useEffect, useState } from 'react';\r\nimport { Container, Row, Col, Form, FormGroup, FormLabel, FormControl, Button, Card, Modal } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport AllFirms_logo from 'src/assets/images/admin_dashboard_icons/AllFirms.png';\r\nimport { UserContext } from 'src/context/UserContextProvider';\r\nimport { api_url } from 'src/api/APIURL';\r\nimport { FirmusrHeader, FirmusrSidebar } from 'src/components';\r\nimport transfers from 'src/assets/icons/sidebar_icons/transfers.png'\r\n\r\n\r\nconst User_MakeTransfer = () => {\r\n  const { user } = useContext(UserContext);\r\n  const userId = user.userId;\r\n  useEffect(() => {\r\n    console.log(userId);\r\n  }, [userId]);\r\n\r\n  const [firms, setFirms] = useState([]);\r\n  const [firms2, setFirms2] = useState([]);\r\n  const [selectedFromFirmId, setSelectedFromFirmId] = useState('');\r\n  const [selectedToFirmId, setSelectedToFirmId] = useState('');\r\n  const [fromGeneralLedgers, setFromGeneralLedgers] = useState([]);\r\n  const [toGeneralLedgers, setToGeneralLedgers] = useState([]);\r\n  const [selectedFromGLId, setSelectedFromGLId] = useState('');\r\n  const [selectedToGLId, setSelectedToGLId] = useState('');\r\n  const [amount, setAmount] = useState('');\r\n  const [remark, setRemark] = useState('');\r\n  const [loadingFromGL, setLoadingFromGL] = useState(false);\r\n  const [loadingToGL, setLoadingToGL] = useState(false);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [modalTitle, setModalTitle] = useState('');\r\n  const [modalMessage, setModalMessage] = useState('');\r\n  const [modalButtonText, setModalButtonText] = useState('');\r\n  const [errors, setErrors] = useState({}); // State for validation errors\r\n\r\n  useEffect(() => {\r\n    const fetchFirms = async () => {\r\n      try {\r\n        const response = await fetch(`${api_url}/api/users/get_all_firms_by_user/${userId}`);\r\n        if (!response.ok) {\r\n          throw new Error('Failed to show firms');\r\n        }\r\n        const resdata = await response.json();\r\n        setFirms(resdata.data);\r\n      } catch (error) {\r\n        console.error('Error fetching firms:', error);\r\n      }\r\n    };\r\n    fetchFirms();\r\n  }, [userId]);\r\n\r\n  useEffect(() => {\r\n    const fetchFirms = async () => {\r\n      try {\r\n        const response = await fetch(`${api_url}/api/users/get_all_firms_by_adding_user/${userId}`);\r\n        if (!response.ok) {\r\n          throw new Error('Failed to show firms');\r\n        }\r\n        const resdata = await response.json();\r\n        setFirms2(resdata.data);\r\n      } catch (error) {\r\n        console.error('Error fetching firms:', error);\r\n      }\r\n    };\r\n    fetchFirms();\r\n  }, [userId]);\r\n\r\n  const fetchGeneralLedgers = async (firm_id) => {\r\n    try {\r\n      const response = await fetch(`${api_url}/api/users/get_general_ledgers/${firm_id}`);\r\n      if (!response.ok) {\r\n        throw new Error('Failed to show GL list');\r\n      }\r\n      const data = await response.json();\r\n      return data.data;\r\n    } catch (error) {\r\n      console.error('Error fetching GL list:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const loadGeneralLedgers = async () => {\r\n      if (selectedFromFirmId) {\r\n        setLoadingFromGL(true);\r\n        const generalLedgers = await fetchGeneralLedgers(selectedFromFirmId);\r\n        setFromGeneralLedgers(generalLedgers);\r\n        setLoadingFromGL(false);\r\n      }\r\n    };\r\n    loadGeneralLedgers();\r\n  }, [selectedFromFirmId]);\r\n\r\n  useEffect(() => {\r\n    const loadGeneralLedgers = async () => {\r\n      if (selectedToFirmId) {\r\n        setLoadingToGL(true);\r\n        const generalLedgers = await fetchGeneralLedgers(selectedToFirmId);\r\n        setToGeneralLedgers(generalLedgers);\r\n        setLoadingToGL(false);\r\n      }\r\n    };\r\n    loadGeneralLedgers();\r\n  }, [selectedToFirmId]);\r\n\r\n  const validateAmount = (amount) => {\r\n    const errors = {};\r\n    if (!amount) {\r\n      errors.amount = 'Amount is required';\r\n    } else if (isNaN(amount) || amount <= 0) {\r\n      errors.amount = 'Amount must be a positive number';\r\n    }\r\n    return errors;\r\n  };\r\n\r\n  const handleSavePayment = () => {\r\n    const validationErrors = validateAmount(amount);\r\n    if (Object.keys(validationErrors).length > 0) {\r\n      setErrors(validationErrors);\r\n      return;\r\n    }\r\n    setModalTitle('Confirm Transaction');\r\n    setModalMessage('Are you sure you want to proceed with this Transaction?');\r\n    setModalButtonText('Confirm Transaction');\r\n    setShowModal(true);\r\n  };\r\n\r\n  const confirmPayment = async () => {\r\n    try {\r\n      const payload = {\r\n        from_gl_id: selectedFromGLId,\r\n        to_gl_id: selectedToGLId,\r\n        amount: Number(amount),\r\n        from_firm_id: selectedFromFirmId,\r\n        to_firm_id: selectedToFirmId,\r\n        remark: remark\r\n      };\r\n\r\n      const response = await fetch(`${api_url}/api/users/payment/${userId}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(payload)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to process this transaction');\r\n      }\r\n\r\n      const result = await response.json();\r\n      console.log(result);\r\n      setModalTitle('Payment Successful');\r\n      setModalMessage('Your transaction was successful.');\r\n      setModalButtonText('Close');\r\n      setShowModal(true);\r\n    } catch (error) {\r\n      console.error('Problem for processing transaction:', error);\r\n      setModalTitle('Payment Failed');\r\n      setModalMessage('Your transaction failed. Please try again.');\r\n      setModalButtonText('Close');\r\n      setShowModal(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <FirmusrSidebar />\r\n      <div className=\"wrapper d-flex flex-column min-vh-100 bg-light\">\r\n        <FirmusrHeader />\r\n        <Container fluid className=\"flex-grow-1 px-3 px-md-5\">\r\n          <Row className='justify-content-center mb-3'>\r\n            <Col md={12}>\r\n              <Card className='card_border_color_change py-5' style={{ borderColor: \"white\" }}>\r\n                <Row className='allfirms_title_mainrow'>\r\n                  <Col md={8} style={{ marginLeft: \"10px\" }}>\r\n                    <Row className='allfirms_title_row py-1 align-items-center'>\r\n                      <Col md={1}>\r\n                        <img className='' src={transfers} width={25} height={25} alt=\"AllFirms Logo\" />\r\n                      </Col>\r\n                      <Col md={5}>\r\n                        <h5 className=\"mb-0\" style={{color: 'white'}}>Make Transaction</h5>\r\n                      </Col>\r\n                    </Row>\r\n                  </Col>\r\n                  <Col md={3} className='d-flex align-items-center justify-content-end'>\r\n                    <Link to={'/user_firm_transactions'}>\r\n                      <Button id=\"but_color\">All Transactions</Button>\r\n                    </Link>\r\n                  </Col>\r\n                </Row>\r\n\r\n                <Row className='allfirms_table_row py-5 justify-content-center'>\r\n                  <Col className=\"make_pay_block_col mb-3 mb-md-0\">\r\n                    <Row className='justify-content-center'>\r\n                      <Col md={12}>\r\n                        <Card className='bg_color_blue_white'>\r\n                          <Card.Body>\r\n                            <Form>\r\n                              <FormGroup className=\"mb-3\" controlId=\"formTransactionID\">\r\n                                <FormLabel>Transaction :</FormLabel>\r\n                              </FormGroup>\r\n                              <FormGroup as={Row} className=\"mb-3\" controlId=\"formFrom\">\r\n                                <FormLabel column className='make_pay_lable' md={3}>From:</FormLabel>\r\n                                <Col className='make_pay_select_firm'>\r\n                                  <Form.Control\r\n                                    as=\"select\"\r\n                                    value={selectedFromFirmId}\r\n                                    className='form-select'\r\n                                    onChange={(e) => setSelectedFromFirmId(e.target.value)}\r\n                                  >\r\n                                    <option value=\"\">Select Firm</option>\r\n                                    {firms.map((firm) => (\r\n                                      <option key={firm.firm_id} value={firm.firm_id}>\r\n                                        {firm.firm_name}\r\n                                      </option>\r\n                                    ))}\r\n                                  </Form.Control>\r\n                                </Col>\r\n                                <Col className='make_pay_select_acc'>\r\n                                  <Form.Control\r\n                                    as=\"select\"\r\n                                    value={selectedFromGLId}\r\n                                    className='form-select'\r\n                                    onChange={(e) => setSelectedFromGLId(e.target.value)}\r\n                                    disabled={!selectedFromFirmId || loadingFromGL}\r\n                                  >\r\n                                    <option value=\"\">Select Your Firm Account</option>\r\n                                    {fromGeneralLedgers.map((gl) => (\r\n                                      <option key={gl.gl_id} value={gl.gl_id}>\r\n                                        {gl.gl_name}\r\n                                      </option>\r\n                                    ))}\r\n                                  </Form.Control>\r\n                                  {loadingFromGL && <p>Loading...</p>}\r\n                                </Col>\r\n                              </FormGroup>\r\n                              <FormGroup as={Row} className=\"mb-3\" controlId=\"formTo\">\r\n                                <FormLabel column className='make_pay_lable' md={3}>To:</FormLabel>\r\n                                <Col className='make_pay_select_firm'>\r\n                                  <Form.Control\r\n                                    as=\"select\"\r\n                                    value={selectedToFirmId}\r\n                                    className='form-select'\r\n                                    onChange={(e) => setSelectedToFirmId(e.target.value)}\r\n                                  >\r\n                                    <option value=\"\">Select Firm</option>\r\n                                    {firms2.map((firm) => (\r\n                                      <option key={firm.firm_id} value={firm.firm_id}>\r\n                                        {firm.firm_name}\r\n                                      </option>\r\n                                    ))}\r\n                                  </Form.Control>\r\n                                </Col>\r\n                                <Col className='make_pay_select_acc'>\r\n                                  <Form.Control\r\n                                    as=\"select\"\r\n                                    value={selectedToGLId}\r\n                                    className='form-select'\r\n                                    onChange={(e) => setSelectedToGLId(e.target.value)}\r\n                                    disabled={!selectedToFirmId || loadingToGL}\r\n                                  >\r\n                                    <option value=\"\">Select Your Firm Account</option>\r\n                                    {toGeneralLedgers.map((gl) => (\r\n                                      <option key={gl.gl_id} value={gl.gl_id}>\r\n                                        {gl.gl_name}\r\n                                      </option>\r\n                                    ))}\r\n                                  </Form.Control>\r\n                                  {loadingToGL && <p>Loading...</p>}\r\n                                </Col>\r\n                              </FormGroup>\r\n                              <FormGroup as={Row} className=\"mb-3\" controlId=\"formAmount\">\r\n                                <FormLabel column sm={3}>Amount :</FormLabel>\r\n                                <Col sm={4}>\r\n                                  <FormControl\r\n                                    type=\"text\"\r\n                                    placeholder=\"Enter Amount\"\r\n                                    value={amount}\r\n                                    onChange={(e) => setAmount(e.target.value)}\r\n                                    isInvalid={!!errors.amount}\r\n                                  />\r\n                                  <Form.Control.Feedback type=\"invalid\">\r\n                                    {errors.amount}\r\n                                  </Form.Control.Feedback>\r\n                                </Col>\r\n                              </FormGroup>\r\n                              <FormGroup as={Row} className=\"mb-3\" controlId=\"formRemark\">\r\n                                <FormLabel column sm={3}>Remark :</FormLabel>\r\n                                <Col sm={9}>\r\n                                  <FormControl\r\n                                    type=\"text\"\r\n                                    placeholder=\"Enter Remark\"\r\n                                    value={remark}\r\n                                    onChange={(e) => setRemark(e.target.value)}\r\n                                  />\r\n                                </Col>\r\n                              </FormGroup>\r\n                            </Form>\r\n                          </Card.Body>\r\n                        </Card>\r\n                        <Row className='justify-content-center mt-3'>\r\n                          <Button className='col-md-4 col-6' id='but_color' onClick={handleSavePayment}>Process Transaction</Button>\r\n                        </Row>\r\n                      </Col>\r\n                    </Row>\r\n                  </Col>\r\n                </Row>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n\r\n      {/* Modal */}\r\n      <Modal show={showModal} onHide={() => setShowModal(false)} centered>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>{modalTitle}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>{modalMessage}</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={() => setShowModal(false)}>\r\n            {modalButtonText === 'Confirm Transaction' ? 'Cancel' : 'Close'}\r\n          </Button>\r\n          {modalButtonText === 'Confirm Transaction' && (\r\n            <Button variant=\"primary\" onClick={confirmPayment}>\r\n              {modalButtonText}\r\n            </Button>\r\n          )}\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default User_MakeTransfer;\r\n","const _excluded = [\"as\", \"disabled\"];\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function isTrivialHref(href) {\n  return !href || href.trim() === '#';\n}\nexport function useButtonProps({\n  tagName,\n  disabled,\n  href,\n  target,\n  rel,\n  role,\n  onClick,\n  tabIndex = 0,\n  type\n}) {\n  if (!tagName) {\n    if (href != null || target != null || rel != null) {\n      tagName = 'a';\n    } else {\n      tagName = 'button';\n    }\n  }\n  const meta = {\n    tagName\n  };\n  if (tagName === 'button') {\n    return [{\n      type: type || 'button',\n      disabled\n    }, meta];\n  }\n  const handleClick = event => {\n    if (disabled || tagName === 'a' && isTrivialHref(href)) {\n      event.preventDefault();\n    }\n    if (disabled) {\n      event.stopPropagation();\n      return;\n    }\n    onClick == null ? void 0 : onClick(event);\n  };\n  const handleKeyDown = event => {\n    if (event.key === ' ') {\n      event.preventDefault();\n      handleClick(event);\n    }\n  };\n  if (tagName === 'a') {\n    // Ensure there's a href so Enter can trigger anchor button.\n    href || (href = '#');\n    if (disabled) {\n      href = undefined;\n    }\n  }\n  return [{\n    role: role != null ? role : 'button',\n    // explicitly undefined so that it overrides the props disabled in a spread\n    // e.g. <Tag {...props} {...hookProps} />\n    disabled: undefined,\n    tabIndex: disabled ? undefined : tabIndex,\n    href,\n    target: tagName === 'a' ? target : undefined,\n    'aria-disabled': !disabled ? undefined : disabled,\n    rel: tagName === 'a' ? rel : undefined,\n    onClick: handleClick,\n    onKeyDown: handleKeyDown\n  }, meta];\n}\nconst Button = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n      as: asProp,\n      disabled\n    } = _ref,\n    props = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const [buttonProps, {\n    tagName: Component\n  }] = useButtonProps(Object.assign({\n    tagName: asProp,\n    disabled\n  }, props));\n  return /*#__PURE__*/_jsx(Component, Object.assign({}, props, buttonProps, {\n    ref: ref\n  }));\n});\nButton.displayName = 'Button';\nexport default Button;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useButtonProps } from '@restart/ui/Button';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Button = /*#__PURE__*/React.forwardRef(({\n  as,\n  bsPrefix,\n  variant = 'primary',\n  size,\n  active = false,\n  disabled = false,\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn');\n  const [buttonProps, {\n    tagName\n  }] = useButtonProps({\n    tagName: as,\n    disabled,\n    ...props\n  });\n  const Component = tagName;\n  return /*#__PURE__*/_jsx(Component, {\n    ...buttonProps,\n    ...props,\n    ref: ref,\n    disabled: disabled,\n    className: classNames(className, prefix, active && 'active', variant && `${prefix}-${variant}`, size && `${prefix}-${size}`, props.href && disabled && 'disabled')\n  });\n});\nButton.displayName = 'Button';\nexport default Button;"],"names":["api_url","User_MakeTransfer","user","useContext","UserContext","userId","useEffect","console","log","firms","setFirms","useState","firms2","setFirms2","selectedFromFirmId","setSelectedFromFirmId","selectedToFirmId","setSelectedToFirmId","fromGeneralLedgers","setFromGeneralLedgers","toGeneralLedgers","setToGeneralLedgers","selectedFromGLId","setSelectedFromGLId","selectedToGLId","setSelectedToGLId","amount","setAmount","remark","setRemark","loadingFromGL","setLoadingFromGL","loadingToGL","setLoadingToGL","showModal","setShowModal","modalTitle","setModalTitle","modalMessage","setModalMessage","modalButtonText","setModalButtonText","errors","setErrors","async","response","fetch","concat","ok","Error","resdata","json","data","error","fetchFirms","fetchGeneralLedgers","firm_id","generalLedgers","loadGeneralLedgers","_jsxs","children","_jsx","FirmusrSidebar","className","FirmusrHeader","Container","fluid","Row","Col","md","Card","style","borderColor","marginLeft","src","transfers","width","height","alt","color","Link","to","Button","id","Body","Form","FormGroup","controlId","FormLabel","as","column","Control","value","onChange","e","target","map","firm","firm_name","disabled","gl","gl_id","gl_name","sm","FormControl","type","placeholder","isInvalid","Feedback","onClick","handleSavePayment","validationErrors","isNaN","validateAmount","Object","keys","length","Modal","show","onHide","centered","Header","closeButton","Title","Footer","variant","payload","from_gl_id","to_gl_id","Number","from_firm_id","to_firm_id","method","headers","body","JSON","stringify","result","_excluded","useButtonProps","_ref2","tagName","href","rel","role","tabIndex","meta","handleClick","event","trim","isTrivialHref","preventDefault","stopPropagation","undefined","onKeyDown","key","React","_ref","ref","asProp","props","source","excluded","i","sourceKeys","indexOf","_objectWithoutPropertiesLoose","buttonProps","Component","assign","displayName","bsPrefix","size","active","prefix","useBootstrapPrefix","classNames"],"sourceRoot":""}