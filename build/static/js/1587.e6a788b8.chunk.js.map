{"version":3,"file":"static/js/1587.e6a788b8.chunk.js","mappings":"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","sources":["api/APIURL.js","views/firm_user/Reports/Firm_Transactions/User_Firm_Transactions.js"],"sourcesContent":["export const api_url = 'http://13.126.48.224:3007';","import React, { useState, useEffect, useContext } from 'react';\nimport { CButton, CCard, CCol, CImage, CRow } from '@coreui/react';\nimport { AdminHeader, AdminSidebar, FirmusrHeader, FirmusrSidebar } from 'src/components';\nimport AllFirms_logo from 'src/assets/images/admin_dashboard_icons/AllFirms.png';\nimport { Col, Form, FormControl, FormGroup, Row, Card, Table } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { UserContext } from 'src/context/UserContextProvider';\nimport { api_url } from 'src/api/APIURL';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nconst User_Firm_Transactions = () => {\n  const { user } = useContext(UserContext);\n  const userId = user.userId;\n  const [firms, setFirms] = useState([]);\n  const [selectedFirmId, setSelectedFirmId] = useState('');\n  const [transactions, setTransactions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [totalBalance, setTotalBalance] = useState(null);\n  const [hasTransactions, setHasTransactions] = useState(true);\n  const [startDate, setStartDate] = useState(null);\n  const [endDate, setEndDate] = useState(null);\n\n  useEffect(() => {\n    const fetchFirms = async () => {\n      try {\n        const response = await fetch(`${api_url}/api/users/get_all_firms_by_user/${userId}`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch firms');\n        }\n        const resdata = await response.json();\n        setFirms(resdata.data);\n      } catch (error) {\n        console.error('Error fetching firms:', error);\n      }\n    };\n    fetchFirms();\n  }, [userId]);\n\n  useEffect(() => {\n    fetchTransactions();\n  }, [selectedFirmId, startDate, endDate]);\n\n  const fetchTransactions = async () => {\n    if (selectedFirmId) {\n      setLoading(true);\n      try {\n        const firm_id = selectedFirmId;\n        let url = `${api_url}/api/users/show_firm_all_transactions/${firm_id}/transactions`;\n\n        if (startDate) {\n          const formattedStartDate = startDate.toLocaleDateString('en-CA'); // Format as YYYY-MM-DD\n          url += `?startDate=${formattedStartDate}`;\n        }\n        if (endDate) {\n          const adjustedEndDate = new Date(endDate);\n          adjustedEndDate.setDate(adjustedEndDate.getDate() + 1);\n          const formattedEndDate = adjustedEndDate.toLocaleDateString('en-CA'); // Format as YYYY-MM-DD\n          url += startDate ? `&endDate=${formattedEndDate}` : `?endDate=${formattedEndDate}`;\n        }\n\n        const response = await fetch(url);\n        const resdata = await response.json();\n        if (!response.ok || resdata.status === false) {\n          setHasTransactions(false);\n          setTransactions([]);\n          return;\n        }\n        setTransactions(resdata.data);\n        setHasTransactions(resdata.data.length > 0);\n      } catch (error) {\n        console.error('Error fetching transactions:', error);\n        setHasTransactions(false);\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    const fetchTotalBalance = async () => {\n      if (selectedFirmId) {\n        try {\n          const firm_id = selectedFirmId;\n          const response = await fetch(`${api_url}/api/users/firm_total_bal/${firm_id}`);\n          if (!response.ok) {\n            throw new Error('Failed to fetch total balance');\n          }\n          const resdata = await response.json();\n          setTotalBalance(resdata.data.totalBalance);\n        } catch (error) {\n          console.error('Error fetching total balance:', error);\n        }\n      }\n    };\n    fetchTotalBalance();\n  }, [selectedFirmId]);\n\n  return (\n    <div>\n      <FirmusrSidebar />\n      <div className=\"wrapper d-flex flex-column min-vh-100 bg-light\">\n        <FirmusrHeader />\n        <div className=\"body flex-grow-1 px-5\">\n          <>\n            <CRow className='justify-content-center mb-3'>\n              <CCol className='col-md-12'>\n                <CCard className='card_border_color_change py-5' style={{ borderColor: \"white\" }}>\n                  <CRow className='allfirms_title_mainrow'>\n                    <CCol className='col-md-8' style={{ marginLeft: \"10px\" }}>\n                      <CRow className='allfirms_title_row py-1 align-items-center'>\n                        <CCol className='col-md-1'>\n                          <CImage className='' src={AllFirms_logo} width={25} height={25} />\n                        </CCol>\n                        <CCol className='col-md-5'>\n                          <h4>Firm Transactions</h4>\n                        </CCol>\n                      </CRow>\n                    </CCol>\n                    <CCol className='col-md-3 align-content-center justify-content-end'>\n                      <Link to={'/user_maketransfer'}>\n                        <CButton id=\"but_color\">Make A Transaction</CButton>\n                      </Link>\n                    </CCol>\n                  </CRow>\n\n                  <CRow className='allfirms_table_row py-5 justify-content-center'>\n                    <CCol>\n                      {/* <CRow className='justify-content-center'>\n                        <CCol className='col-md-2'>\n                          <Form>\n                            <FormGroup as={Row} className=\"mb-3\" controlId=\"formUserType\">\n                              <Col>\n                                <Form.Check\n                                  type=\"radio\"\n                                  label=\"Firm\"\n                                  name=\"userType\"\n                                  id=\"firm\"\n                                  inline\n                                  defaultChecked\n                                />\n                                <Form.Check\n                                  type=\"radio\"\n                                  label=\"User\"\n                                  name=\"userType\"\n                                  id=\"user\"\n                                  inline\n                                />\n                              </Col>\n                            </FormGroup>\n                          </Form>\n                        </CCol>\n                      </CRow> */}\n                      <CRow className='justify-content-start mb-3'>\n                        <CCol md={8} className=\"justify-content-start justify-content-md-start\" style={{ paddingLeft: \"200px\" }}>\n                          <Form>\n                            <FormGroup as={Row} className=\"mb-3\">\n                              <Col md={11} className=\"justify-content-start justify-content-md-start\">\n                                {/* <Form.Label className=\"col-md-5 mb-0\">Select Firm</Form.Label> */}\n                                <FormControl\n                                  as=\"select\"\n                                  value={selectedFirmId}\n                                  className=\"form-select\"\n                                  onChange={(e) => setSelectedFirmId(e.target.value)}\n                                  style={{ maxWidth: '100%' }}  // Adjust the width as needed\n                                >\n                                  <option value=\"\">Select Firm</option>\n                                  {firms.map((firm) => (\n                                    <option key={firm.firm_id} value={firm.firm_id}>\n                                      {firm.firm_name}\n                                    </option>\n                                  ))}\n                                </FormControl>\n                              </Col>\n                            </FormGroup>\n                          </Form>\n                        </CCol>\n\n                        <CCol md={4} className=\"d-flex align-items-center justify-content-center justify-content-md-end mt-3 mt-md-0\">\n                          {totalBalance !== null && (\n                            <div style={{\n                              backgroundColor: 'green',\n                              color: 'white',\n                              padding: '10px',\n                              borderRadius: '5px'\n                            }}>\n                              Firm Total Balance: {totalBalance}\n                            </div>\n                          )}\n                        </CCol>\n                      </CRow>\n\n                      <CRow className='justify-content-center mb-3'>\n                        <CCol md={9} className=\"d-flex justify-content-md-between\">\n                          <DatePicker\n                            selected={startDate}\n                            onChange={(date) => setStartDate(date)}\n                            selectsStart\n                            startDate={startDate}\n                            endDate={endDate}\n                            placeholderText=\"Start Date\"\n                            className=\"form-control\"\n                            md={3}\n                          />\n                          <DatePicker\n                            selected={endDate}\n                            onChange={(date) => setEndDate(date)}\n                            selectsEnd\n                            startDate={startDate}\n                            endDate={endDate}\n                            minDate={startDate}\n                            placeholderText=\"End Date\"\n                            className=\"form-control\"\n                            md={3}\n                          />\n                          <CButton onClick={fetchTransactions} id=\"but_color\" md={2}>Filter</CButton>\n                        </CCol>\n                      </CRow>\n\n                      <CRow>\n                        <Col md={12}>\n                          <Form>\n                            <Card className=\"mb-3\">\n                              <Card.Header className=\"text-white\" id='bg__color'>Firm Transactions</Card.Header>\n                              <Card.Body>\n                                {loading ? (\n                                  <p>Loading...</p>\n                                ) : !hasTransactions ? (\n                                  <p>No Transactions for this firm</p>\n                                ) : (\n                                  <Table striped bordered hover responsive>\n                                    <thead>\n                                      <tr>\n                                        <th>Sr.No</th>\n                                        <th>Account</th>\n                                        <th>Transaction with Firm</th>\n                                        <th>Cr/Dr</th>\n                                        <th>Date</th>\n                                      </tr>\n                                    </thead>\n                                    <tbody>\n                                      {transactions.map((transaction, index) => (\n                                        <tr key={transaction.transaction_id}>\n                                          <td>{index + 1}</td>\n                                          {transaction.to_firm_name ? (\n                                            <td>{transaction.from_gl_name}</td>\n                                          ) : (\n                                            <td>{transaction.to_gl_name}</td>\n                                          )}\n\n                                          {transaction.to_firm_name ? (\n                                            <td>{transaction.to_firm_name} - {transaction.to_gl_name}</td>\n                                          ) : (\n                                            <td>{transaction.from_firm_name} - {transaction.from_gl_name}</td>\n                                          )}\n                                          <td style={{ color: transaction.type === 'payment' ? \"red\" : \"green\" }}>{transaction.type === 'payment' ? '-' : '+'}{transaction.amount}</td>\n                                          <td>{new Date(transaction.transaction_date).toLocaleString()}</td>\n                                        </tr>\n                                      ))}\n                                    </tbody>\n                                  </Table>\n                                )}\n                              </Card.Body>\n                            </Card>\n                          </Form>\n                        </Col>\n                      </CRow>\n                    </CCol>\n                  </CRow>\n                </CCard>\n              </CCol>\n            </CRow>\n          </>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default User_Firm_Transactions;"],"names":["api_url","User_Firm_Transactions","user","useContext","UserContext","userId","firms","setFirms","useState","selectedFirmId","setSelectedFirmId","transactions","setTransactions","loading","setLoading","totalBalance","setTotalBalance","hasTransactions","setHasTransactions","startDate","setStartDate","endDate","setEndDate","useEffect","async","response","fetch","concat","ok","Error","resdata","json","data","error","console","fetchFirms","fetchTransactions","firm_id","url","formattedStartDate","toLocaleDateString","adjustedEndDate","Date","setDate","getDate","formattedEndDate","status","length","fetchTotalBalance","_jsxs","children","_jsx","FirmusrSidebar","className","FirmusrHeader","_Fragment","CRow","CCol","CCard","style","borderColor","marginLeft","CImage","src","AllFirms_logo","width","height","Link","to","CButton","id","md","paddingLeft","Form","FormGroup","as","Row","Col","FormControl","value","onChange","e","target","maxWidth","map","firm","firm_name","backgroundColor","color","padding","borderRadius","DatePicker","selected","date","selectsStart","placeholderText","selectsEnd","minDate","onClick","Card","Header","Body","Table","striped","bordered","hover","responsive","transaction","index","to_firm_name","from_gl_name","to_gl_name","from_firm_name","type","amount","transaction_date","toLocaleString","transaction_id"],"sourceRoot":""}