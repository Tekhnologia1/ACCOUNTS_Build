{"version":3,"file":"static/js/3754.b7488a0d.chunk.js","mappings":"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","sources":["api/APIURL.js","views/firm_user/Payments/User_AllPayments.js"],"sourcesContent":["export const api_url = 'http://15.206.84.226:3007';","import React, { useState, useEffect, useContext } from 'react';\r\nimport { CButton, CCard, CCol, CImage, CRow } from '@coreui/react';\r\nimport { FirmusrHeader, FirmusrSidebar } from 'src/components';\r\nimport AllFirms_logo from 'src/assets/images/admin_dashboard_icons/AllFirms.png';\r\nimport { Col, Form, FormControl, FormGroup, Row, Card, Table } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { UserContext } from 'src/context/UserContextProvider';\r\nimport { api_url } from 'src/api/APIURL';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\nconst User_AllPayments = () => {\r\n  const { user } = useContext(UserContext);\r\n  const userId = user.userId;\r\n  const [firms, setFirms] = useState([]);\r\n  const [selectedFirmId, setSelectedFirmId] = useState('');\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [totalBalance, setTotalBalance] = useState(null);\r\n  const [hasTransactions, setHasTransactions] = useState(true);\r\n  const [startDate, setStartDate] = useState(null);\r\n  const [endDate, setEndDate] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchFirms = async () => {\r\n      try {\r\n        const response = await fetch(`${api_url}/api/users/get_all_firms_by_user/${userId}`);\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch firms');\r\n        }\r\n        const resdata = await response.json();\r\n        setFirms(resdata.data);\r\n      } catch (error) {\r\n        console.error('Error fetching firms:', error);\r\n      }\r\n    };\r\n    fetchFirms();\r\n  }, [userId]);\r\n\r\n  useEffect(() => {\r\n    fetchTransactions();\r\n  }, [selectedFirmId]);\r\n\r\n  useEffect(() => {\r\n    const fetchTotalBalance = async () => {\r\n      if (selectedFirmId) {\r\n        try {\r\n          const firm_id = selectedFirmId;\r\n          const response = await fetch(`${api_url}/api/users/firm_total_bal/${firm_id}`);\r\n          if (!response.ok) {\r\n            throw new Error('Failed to fetch total balance');\r\n          }\r\n          const resdata = await response.json();\r\n          setTotalBalance(resdata.data.totalBalance);\r\n        } catch (error) {\r\n          console.error('Error fetching total balance:', error);\r\n        }\r\n      }\r\n    };\r\n    fetchTotalBalance();\r\n  }, [selectedFirmId]);\r\n\r\n  const fetchTransactions = async () => {\r\n    if (selectedFirmId) {\r\n      setLoading(true);\r\n      try {\r\n        const firm_id = selectedFirmId;\r\n        let url = `${api_url}/api/users/show_payment_transac/${firm_id}`;\r\n\r\n        if (startDate) {\r\n          const formattedStartDate = startDate.toLocaleDateString('en-CA'); // Format as YYYY-MM-DD\r\n          url += `?startDate=${formattedStartDate}`;\r\n        }\r\n        if (endDate) {\r\n          const adjustedEndDate = new Date(endDate);\r\n          adjustedEndDate.setDate(adjustedEndDate.getDate() + 1);\r\n          const formattedEndDate = adjustedEndDate.toLocaleDateString('en-CA'); // Format as YYYY-MM-DD\r\n          url += startDate ? `&endDate=${formattedEndDate}` : `?endDate=${formattedEndDate}`;\r\n        }\r\n\r\n        const response = await fetch(url);\r\n        const resdata = await response.json();\r\n        if (!response.ok || resdata.status === false) {\r\n          setHasTransactions(false);\r\n          setTransactions([]);\r\n          return;\r\n        }\r\n        setTransactions(resdata.data);\r\n        setHasTransactions(resdata.data.length > 0);\r\n      } catch (error) {\r\n        console.error('Error fetching transactions:', error);\r\n        setHasTransactions(false);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <FirmusrSidebar />\r\n      <div className=\"wrapper d-flex flex-column min-vh-100 bg-light\">\r\n        <FirmusrHeader />\r\n        <div className=\"body flex-grow-1 px-5\">\r\n          <CRow className='justify-content-center mb-3'>\r\n            <CCol md={12}>\r\n              <CCard className='card_border_color_change py-5' style={{ borderColor: \"white\" }}>\r\n                <CRow className='allfirms_title_mainrow'>\r\n                  <CCol md={8} style={{ marginLeft: \"10px\" }}>\r\n                    <CRow className='allfirms_title_row py-1 align-items-center'>\r\n                      <CCol md={1}>\r\n                        <CImage className='' src={AllFirms_logo} width={25} height={25} />\r\n                      </CCol>\r\n                      <CCol md={2}>\r\n                        <h4>All Payments</h4>\r\n                      </CCol>\r\n                    </CRow>\r\n                  </CCol>\r\n                  <CCol md={3} className='align-content-center justify-content-end'>\r\n                    <Link to={'/user_makepayment'}>\r\n                      <CButton id=\"but_color\">Make A Payment</CButton>\r\n                    </Link>\r\n                  </CCol>\r\n                </CRow>\r\n\r\n                <CRow className='allfirms_table_row py-5 justify-content-center'>\r\n                  <CCol>\r\n                    {/* <CRow className='justify-content-center'>\r\n                      <CCol md={2}>\r\n                        <Form>\r\n                          <FormGroup as={Row} className=\"mb-3\" controlId=\"formUserType\">\r\n                            <Col>\r\n                              <Form.Check\r\n                                type=\"radio\"\r\n                                label=\"Firm\"\r\n                                name=\"userType\"\r\n                                id=\"firm\"\r\n                                inline\r\n                                defaultChecked\r\n                              />\r\n                              <Form.Check\r\n                                type=\"radio\"\r\n                                label=\"User\"\r\n                                name=\"userType\"\r\n                                id=\"user\"\r\n                                inline\r\n                              />\r\n                            </Col>\r\n                          </FormGroup>\r\n                        </Form>\r\n                      </CCol>\r\n                    </CRow> */}\r\n                    <CRow className='justify-content-end mb-3'>\r\n                      <CCol md={8} className=\"justify-content-end justify-content-md-end\" style={{paddingLeft: \"375px\"}}>\r\n                        <Form>\r\n                          <FormGroup as={Row} className=\"mb-3\">\r\n                            <Col md={11} className=\"justify-content-end justify-content-md-end\">\r\n                              {/* <Form.Label className=\"col-md-5 mb-0\">Select Firm</Form.Label> */}\r\n                              <FormControl\r\n                                as=\"select\"\r\n                                value={selectedFirmId}\r\n                                className=\"form-select\"\r\n                                onChange={(e) => setSelectedFirmId(e.target.value)}\r\n                                style={{ maxWidth: '100%' }} // Adjust the width as needed\r\n                              >\r\n                                <option value=\"\">Select Firm</option>\r\n                                {firms.map((firm) => (\r\n                                  <option key={firm.firm_id} value={firm.firm_id}>\r\n                                    {firm.firm_name}\r\n                                  </option>\r\n                                ))}\r\n                              </FormControl>\r\n                            </Col>\r\n                          </FormGroup>\r\n                        </Form>\r\n                      </CCol>\r\n\r\n                      <CCol md={4} className=\"d-flex align-items-center justify-content-center justify-content-md-end mt-3 mt-md-0\">\r\n                        {totalBalance !== null && (\r\n                          <div style={{\r\n                            backgroundColor: 'green',\r\n                            color: 'white',\r\n                            padding: '10px',\r\n                            borderRadius: '5px'\r\n                          }}>\r\n                            Firm Total Balance: {totalBalance}\r\n                          </div>\r\n                        )}\r\n                      </CCol>\r\n                    </CRow>\r\n\r\n                    <CRow className='justify-content-center mb-3'>\r\n                      <CCol md={6} className=\"d-flex justify-content-between\">\r\n                        <DatePicker\r\n                          selected={startDate}\r\n                          onChange={(date) => setStartDate(date)}\r\n                          selectsStart\r\n                          startDate={startDate}\r\n                          endDate={endDate}\r\n                          placeholderText=\"Start Date\"\r\n                          className=\"form-control\"\r\n                          md={3}\r\n                        />\r\n                        <DatePicker\r\n                          selected={endDate}\r\n                          onChange={(date) => setEndDate(date)}\r\n                          selectsEnd\r\n                          startDate={startDate}\r\n                          endDate={endDate}\r\n                          minDate={startDate}\r\n                          placeholderText=\"End Date\"\r\n                          className=\"form-control\"\r\n                          md={3}\r\n                        />\r\n                        <CButton onClick={fetchTransactions} id=\"but_color\" md={2}>Filter</CButton>\r\n                      </CCol>\r\n                    </CRow>\r\n\r\n                    <CRow>\r\n                      <Col md={12}>\r\n                        <Form>\r\n                          <Card className=\"mb-3\">\r\n                            <Card.Header className=\"text-white\" id='bg__color'>Payment Transactions</Card.Header>\r\n                            <Card.Body>\r\n                              {loading ? (\r\n                                <p>Loading...</p>\r\n                              ) : !hasTransactions ? (\r\n                                <p>No Transactions for this firm</p>\r\n                              ) : (\r\n                                <Table striped bordered hover responsive>\r\n                                  <thead>\r\n                                    <tr>\r\n                                      <th>Sr.No</th>\r\n                                      <th>From GL Name</th>\r\n                                      <th>To Firm & GL Name</th>\r\n                                      <th>Dr</th>\r\n                                      <th>Date</th>\r\n                                    </tr>\r\n                                  </thead>\r\n                                  <tbody>\r\n                                    {transactions.map((transaction, index) => (\r\n                                      <tr key={transaction.transaction_id}>\r\n                                        <td>{index + 1}</td>\r\n                                        <td>{transaction.from_gl_name}</td>\r\n                                        <td>{transaction.to_firm_name} - {transaction.to_gl_name}</td>\r\n                                        <td style={{ color: \"red\" }}>-{transaction.amount}</td>\r\n                                        <td>{new Date(transaction.transaction_date).toLocaleString()}</td>\r\n                                      </tr>\r\n                                    ))}\r\n                                  </tbody>\r\n                                </Table>\r\n                              )}\r\n                            </Card.Body>\r\n                          </Card>\r\n                        </Form>\r\n                      </Col>\r\n                    </CRow>\r\n                  </CCol>\r\n                </CRow>\r\n              </CCard>\r\n            </CCol>\r\n          </CRow>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default User_AllPayments;\r\n"],"names":["api_url","User_AllPayments","user","useContext","UserContext","userId","firms","setFirms","useState","selectedFirmId","setSelectedFirmId","transactions","setTransactions","loading","setLoading","totalBalance","setTotalBalance","hasTransactions","setHasTransactions","startDate","setStartDate","endDate","setEndDate","useEffect","async","response","fetch","concat","ok","Error","resdata","json","data","error","console","fetchFirms","fetchTransactions","firm_id","fetchTotalBalance","url","formattedStartDate","toLocaleDateString","adjustedEndDate","Date","setDate","getDate","formattedEndDate","status","length","_jsxs","children","_jsx","FirmusrSidebar","className","FirmusrHeader","CRow","CCol","md","CCard","style","borderColor","marginLeft","CImage","src","AllFirms_logo","width","height","Link","to","CButton","id","paddingLeft","Form","FormGroup","as","Row","Col","FormControl","value","onChange","e","target","maxWidth","map","firm","firm_name","backgroundColor","color","padding","borderRadius","DatePicker","selected","date","selectsStart","placeholderText","selectsEnd","minDate","onClick","Card","Header","Body","Table","striped","bordered","hover","responsive","transaction","index","from_gl_name","to_firm_name","to_gl_name","amount","transaction_date","toLocaleString","transaction_id"],"sourceRoot":""}