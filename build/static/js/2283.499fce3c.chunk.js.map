{"version":3,"file":"static/js/2283.499fce3c.chunk.js","mappings":"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","sources":["api/APIURL.js","views/firm_user/Ledgers/User_Create_Ledger.js","../node_modules/@restart/ui/esm/Button.js","../node_modules/react-bootstrap/esm/Button.js"],"sourcesContent":["export const api_url = 'http://20.235.178.6:3007';","import React, { useState, useEffect, useContext } from 'react';\r\nimport { CButton, CCard, CCol, CImage, CRow } from '@coreui/react';\r\nimport { AdminHeader, AdminSidebar, FirmusrHeader, FirmusrSidebar } from 'src/components';\r\nimport AllFirms_logo from 'src/assets/images/admin_dashboard_icons/AllFirms.png';\r\nimport { Form, Button, Row, Col, Modal } from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport { UserContext } from 'src/context/UserContextProvider';\r\nimport { api_url } from 'src/api/APIURL';\r\nimport Firm_acc from 'src/assets/icons/sidebar_icons/Firm_acc.png';\r\n\r\nconst User_Create_Ledger = () => {\r\n    const { user } = useContext(UserContext);\r\n    const userId = user.userId;\r\n    const [firms, setFirms] = useState([]);\r\n    const [selectedFirmId, setSelectedFirmId] = useState('');\r\n    const [generalLedgerName, setGeneralLedgerName] = useState('');\r\n\r\n    const [selectFirmError, setSelectFirmError] = useState('');\r\n    const [glNameError, setGLNameError] = useState('');\r\n\r\n    // Modal state\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [modalMessage, setModalMessage] = useState('');\r\n    const [modalTitle, setModalTitle] = useState('');\r\n\r\n    // Validation functions\r\n    const validateGLName = (e) => {\r\n        setGeneralLedgerName(e.target.value);\r\n        setSelectFirmError('');\r\n\r\n        if (generalLedgerName.length === 0) {\r\n            setGLNameError('Name must be at least 2 characters long.');\r\n            return false;\r\n        }\r\n\r\n        setGLNameError('');\r\n\r\n        const regex = /^[a-zA-Z\\s]+$/;\r\n        if (generalLedgerName.length < 2) {\r\n            setGLNameError('Name must be at least 2 characters long.');\r\n            return false;\r\n        } else if (regex.test(generalLedgerName)) {\r\n            setGLNameError('');\r\n            return true;\r\n        } else {\r\n            setGLNameError('Only letters and spaces are allowed.');\r\n            return false;\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchFirms = async () => {\r\n            try {\r\n                const response = await fetch(`${api_url}/api/users/get_all_firms_by_user/${userId}`);\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch data');\r\n                }\r\n                const resdata = await response.json();\r\n                setFirms(resdata.data);\r\n            } catch (error) {\r\n                console.error('Error fetching firms:', error);\r\n            }\r\n        };\r\n\r\n        fetchFirms();\r\n    }, [userId]);\r\n\r\n    const handleCreateLedger = async () => {\r\n        try {\r\n            if (selectedFirmId) {\r\n                setSelectFirmError('');\r\n            }\r\n\r\n            if (!selectedFirmId || !generalLedgerName) {\r\n                setSelectFirmError('Please select a firm and enter a firm account name');\r\n                return;\r\n            }\r\n\r\n            if (!validateGLName({ target: { value: generalLedgerName } })) {\r\n                setSelectFirmError('');\r\n                setGLNameError('Enter valid firm account name.');\r\n                return;\r\n            }\r\n\r\n            const firm_id = selectedFirmId;\r\n            const response = await axios.post(`${api_url}/api/users/create_general_ledgers/${firm_id}`, {\r\n                gl_name: generalLedgerName\r\n            });\r\n\r\n            if (response.status === 201) {\r\n                setModalTitle('Firm Account Status');\r\n                setModalMessage('Firm account created successfully !!');\r\n                setGeneralLedgerName(''); // Reset the input after successful creation\r\n            } else {\r\n                setModalTitle('Firm Account Status');\r\n                setModalMessage('Please try again !!');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error creating general ledger:', error);\r\n            setModalTitle('Firm Account Status');\r\n            setModalMessage('Something went wrong !!');\r\n        } finally {\r\n            setShowModal(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <FirmusrSidebar />\r\n            <div className=\"wrapper d-flex flex-column min-vh-100 bg-light\">\r\n                <FirmusrHeader />\r\n                <div className=\"body flex-grow-1 px-3\">\r\n                    <CRow className=\"justify-content-center mb-3\">\r\n                        <CCol md={12}>\r\n                            <CCard className=\"card_border_color_change py-5\" style={{ borderColor: \"white\" }}>\r\n                                <CRow className='align-items-center'>\r\n                                    <CCol style={{ marginLeft: \"11px\" }} className='col-9'>\r\n                                        <CRow className='allfirms_icon_title_row align-items-center'>\r\n                                            <CCol className='col-2 col-md-1'>\r\n                                                <img className='sidebar_icon_color' src={Firm_acc} width={25} height={25} alt=\"All Firms Logo\" />\r\n                                            </CCol>\r\n                                            <CCol className='col-8 col-md-7'>\r\n                                                <h5 className=\"title_font mb-0\" style={{ color: 'white' }}>Create Firm Account</h5>\r\n                                            </CCol>\r\n                                        </CRow>\r\n                                    </CCol>\r\n                                </CRow>\r\n                                <CRow className=\"allfirms_table_row py-5 justify-content-center\">\r\n                                    <CCol md={10}>\r\n                                        <Form>\r\n                                            <Form.Group as={Row} className=\"mb-3\" controlId=\"formFirmName\">\r\n                                                <Form.Label column sm={3}>Firm Name</Form.Label>\r\n                                                <Col sm={6}>\r\n                                                    <Form.Control as=\"select\" value={selectedFirmId} className=\"form-select\" onChange={(e) => setSelectedFirmId(e.target.value)}>\r\n                                                        <option value=\"\">Select Firm</option>\r\n                                                        {firms.map((firm) => (\r\n                                                            <option key={firm.firm_id} value={firm.firm_id}>\r\n                                                                {firm.firm_name}\r\n                                                            </option>\r\n                                                        ))}\r\n                                                    </Form.Control>\r\n                                                </Col>\r\n                                            </Form.Group>\r\n                                            <Form.Group as={Row} className=\"mb-3\" controlId=\"formGeneralLedgerName\">\r\n                                                <Form.Label column sm={3}>Firm Account Name</Form.Label>\r\n                                                <Col sm={6}>\r\n                                                    <Form.Control type=\"text\" value={generalLedgerName} onChange={validateGLName} />\r\n                                                    <div style={{ color: 'green', fontSize: '14px' }}>[Firm Account Name can be Expense or Salary or Person Name like 'Aditya', 'Megha']</div>\r\n                                                    {glNameError && <div className=\"text-danger mb-2\">{glNameError}</div>}\r\n                                                </Col>\r\n                                            </Form.Group>\r\n                                            {selectFirmError && <div className=\"text-danger mb-2\">{selectFirmError}</div>}\r\n\r\n                                            <Row className='cf_acc_bt_row justify-content-center align-content-center'>\r\n                                                <Button variant=\"primary\" id=\"but_color\" onClick={handleCreateLedger}>Create</Button>\r\n                                            </Row>\r\n                                        </Form>\r\n                                    </CCol>\r\n                                </CRow>\r\n                            </CCard>\r\n                        </CCol>\r\n                    </CRow>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Modal */}\r\n            <Modal show={showModal} onHide={() => setShowModal(false)} centered>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{modalTitle}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>{modalMessage}</Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={() => setShowModal(false)}>\r\n                        Close\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default User_Create_Ledger;\r\n","const _excluded = [\"as\", \"disabled\"];\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function isTrivialHref(href) {\n  return !href || href.trim() === '#';\n}\nexport function useButtonProps({\n  tagName,\n  disabled,\n  href,\n  target,\n  rel,\n  role,\n  onClick,\n  tabIndex = 0,\n  type\n}) {\n  if (!tagName) {\n    if (href != null || target != null || rel != null) {\n      tagName = 'a';\n    } else {\n      tagName = 'button';\n    }\n  }\n  const meta = {\n    tagName\n  };\n  if (tagName === 'button') {\n    return [{\n      type: type || 'button',\n      disabled\n    }, meta];\n  }\n  const handleClick = event => {\n    if (disabled || tagName === 'a' && isTrivialHref(href)) {\n      event.preventDefault();\n    }\n    if (disabled) {\n      event.stopPropagation();\n      return;\n    }\n    onClick == null ? void 0 : onClick(event);\n  };\n  const handleKeyDown = event => {\n    if (event.key === ' ') {\n      event.preventDefault();\n      handleClick(event);\n    }\n  };\n  if (tagName === 'a') {\n    // Ensure there's a href so Enter can trigger anchor button.\n    href || (href = '#');\n    if (disabled) {\n      href = undefined;\n    }\n  }\n  return [{\n    role: role != null ? role : 'button',\n    // explicitly undefined so that it overrides the props disabled in a spread\n    // e.g. <Tag {...props} {...hookProps} />\n    disabled: undefined,\n    tabIndex: disabled ? undefined : tabIndex,\n    href,\n    target: tagName === 'a' ? target : undefined,\n    'aria-disabled': !disabled ? undefined : disabled,\n    rel: tagName === 'a' ? rel : undefined,\n    onClick: handleClick,\n    onKeyDown: handleKeyDown\n  }, meta];\n}\nconst Button = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n      as: asProp,\n      disabled\n    } = _ref,\n    props = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const [buttonProps, {\n    tagName: Component\n  }] = useButtonProps(Object.assign({\n    tagName: asProp,\n    disabled\n  }, props));\n  return /*#__PURE__*/_jsx(Component, Object.assign({}, props, buttonProps, {\n    ref: ref\n  }));\n});\nButton.displayName = 'Button';\nexport default Button;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useButtonProps } from '@restart/ui/Button';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Button = /*#__PURE__*/React.forwardRef(({\n  as,\n  bsPrefix,\n  variant = 'primary',\n  size,\n  active = false,\n  disabled = false,\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn');\n  const [buttonProps, {\n    tagName\n  }] = useButtonProps({\n    tagName: as,\n    disabled,\n    ...props\n  });\n  const Component = tagName;\n  return /*#__PURE__*/_jsx(Component, {\n    ...buttonProps,\n    ...props,\n    ref: ref,\n    disabled: disabled,\n    className: classNames(className, prefix, active && 'active', variant && `${prefix}-${variant}`, size && `${prefix}-${size}`, props.href && disabled && 'disabled')\n  });\n});\nButton.displayName = 'Button';\nexport default Button;"],"names":["api_url","User_Create_Ledger","user","useContext","UserContext","userId","firms","setFirms","useState","selectedFirmId","setSelectedFirmId","generalLedgerName","setGeneralLedgerName","selectFirmError","setSelectFirmError","glNameError","setGLNameError","showModal","setShowModal","modalMessage","setModalMessage","modalTitle","setModalTitle","validateGLName","e","target","value","length","test","useEffect","async","response","fetch","concat","ok","Error","resdata","json","data","error","console","fetchFirms","_jsxs","children","_jsx","FirmusrSidebar","className","FirmusrHeader","CRow","CCol","md","CCard","style","borderColor","marginLeft","src","Firm_acc","width","height","alt","color","Form","Group","as","Row","controlId","Label","column","sm","Col","Control","onChange","map","firm","firm_id","firm_name","type","fontSize","Button","variant","id","onClick","axios","post","gl_name","status","Modal","show","onHide","centered","Header","closeButton","Title","Body","Footer","_excluded","useButtonProps","_ref2","tagName","disabled","href","rel","role","tabIndex","meta","handleClick","event","trim","isTrivialHref","preventDefault","stopPropagation","undefined","onKeyDown","key","React","_ref","ref","asProp","props","source","excluded","i","sourceKeys","Object","keys","indexOf","_objectWithoutPropertiesLoose","buttonProps","Component","assign","displayName","bsPrefix","size","active","prefix","useBootstrapPrefix","classNames"],"sourceRoot":""}