{"version":3,"file":"static/js/1023.bccdd3f1.chunk.js","mappings":"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","sources":["api/APIRegister.js","api/APIURL.js","views/pages/signup/Signup.js"],"sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\n\n\nimport { api_url } from 'src/api/APIURL';\n\n\n\nconst APIRegister = () => {\n\n  //User_Reg\n  const REGISTER = async (data) => {\n    try {\n      const response = await axios.post(`${api_url}/api/users/register`, data);\n      return response.data;\n    } catch (error) {\n      console.log('Error registering:', error);\n      throw error;\n    }\n  };\n\n  // User_Login\n  const LOGIN = async (data) => {\n    try {\n      const response = await axios.post(`${api_url}/api/users/login`, data);\n      return response.data;\n    } catch (error) {\n      console.log('Invalid credentials:', error);\n      throw error;\n    }\n  };\n\n  // //User_Reset_Pass\n  // const RESET_PASS = async (data) => {\n  //   try {\n  //     const response = await axios.post(`${api_url}/Reset_Password/${data.mobileNo}`, { newPassword: data.newPassword });\n  //     return response.data;\n  //   } catch (error) {\n  //     console.log(\"Can't reset password:\", error);\n  //     throw error;\n  //   }\n  // };\n\n\n  // //Fill_ORG_Details\n  // // http://192.168.1.69:3002/Add_Institute/231     :userId\n  // const ORG_DETAILS = async (userId, data) => {\n  //   try {\n  //     const response = await axios.post(`${api_url}/Add_Institute/${userId}`, data);\n  //     return response.data;\n  //   } catch (error) {\n  //     console.log(\"Unable to add details\", error);\n  //     throw error;\n  //   }\n  // };\n\n\n  // //ADD_SCHOOL_OR_BRANCH\n  // // http://192.168.1.69:3002/Add_Branch/231/4    :userId/instituteId\n  // const ADD_SCHOOL_OR_BRANCH = async (userId, instituteId, data) => {\n  //   try {\n  //     const response = await axios.post(`${api_url}/Add_Branch/${userId}/${instituteId}`, data);\n  //     return response.data;\n  //   } catch (error) {\n  //     console.log(\"Unable to add branch:\", error);\n  //     throw error;\n  //   }\n  // };\n\n\n\n  // //REG_SCHOOL_OR_BRANCH-------//Add School details by Principal\n  // // http://192.168.1.69:3002/Register_Branch/2     :userId\n  // const REG_SCHOOL_OR_BRANCH = async (userId, data) => {\n  //   try {\n  //     const response = await axios.post(`${api_url}/Register_Branch/${userId}`, data);\n\n  //     return response.data;\n  //   } catch (error) {\n  //     console.log(\"Unable to add details:\", error);\n  //     throw error;\n  //   }\n  // };\n\n\n  // //Add_Individual_Personal_Details\n  // // http://192.168.1.69:3002/Add_Info_Indivisual/249   :userId\n  // const ADD_INDIV_PERSO = async (userId, data) => {\n  //   try {\n  //     const response = await axios.post(`${api_url}/Add_Info_Indivisual/${userId}`, data);\n  //     return response.data;\n  //   } catch (error) {\n  //     console.log(\"Unable to add details:\", error);\n  //     throw error;\n  //   }\n  // };\n\n  return { REGISTER, LOGIN };\n}\n\nexport { APIRegister };","export const api_url = 'http://20.235.178.6:3007';","import React, { useState } from 'react';\nimport { Button, Card, Col, Container, Form, Row, InputGroup } from 'react-bootstrap';\nimport { APIRegister } from 'src/api/APIRegister';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'; // Import eye icons\n\nconst Signup = () => {\n  const [nameReg, setNameReg] = useState('');\n  const [emailReg, setEmailReg] = useState('');\n  const [passwordReg, setPasswordReg] = useState('');\n  const [contactNoReg, setContactNoReg] = useState('');\n  const [addressReg, setAddressReg] = useState('');\n  const statusReg = \"1\";\n  const roleReg = \"1\";\n\n  const [nameError, setNameError] = useState('');\n  const [emailError, setEmailError] = useState('');\n  const [contactError, setContactError] = useState('');\n  const [passwordError, setPasswordError] = useState('');\n  const [addressError, setAddressError] = useState('');\n\n  const [successMessage, setSuccessMessage] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const [showPassword, setShowPassword] = useState(false); // State for showing password\n\n  const navigate = useNavigate();\n\n  // Validation functions\n  const validateName = (e) => {\n    setNameReg(e.target.value);\n    if (nameReg.length === 0) {\n      setNameError('Name must be at least 2 characters long.');\n      return false;\n    }\n    setNameError('');\n    const regex = /^[a-zA-Z\\s]+$/;\n    if (nameReg.length < 1) {\n      setNameError('Name must be at least 2 characters long.');\n      return false;\n    } else if (regex.test(nameReg)) {\n      setNameError('');\n      return true;\n    } else {\n      setNameError('Only letters and spaces are allowed.');\n      return false;\n    }\n  };\n\n  const validateEmail = (e) => {\n    if ((e.target.value).length >= 0) {\n      setEmailReg(e.target.value);\n      setEmailError('');\n      const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (regex.test(emailReg)) {\n        setEmailError('');\n        return true;\n      } else {\n        setEmailError('Enter valid email address.');\n        return false;\n      }\n    } else {\n      setEmailError('Email address must not be blank.');\n      return false;\n    }\n  };\n\n  const validatePassword = (e) => {\n    const password = e.target.value;\n    setPasswordReg(password);\n    setPasswordError('');\n    const regex = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d@$!%`~#^&*()-_+={};:'\",.<>*?&]{8,}$/;\n    if (regex.test(password)) {\n      setPasswordError('');\n      return true;\n    } else {\n      setPasswordError('Password must be at least 8 characters long and contain both letters and numbers.');\n      return false;\n    }\n  };\n\n  const validateContact = (e) => {\n    const contactNo = e.target.value;\n    setContactNoReg(contactNo);\n    setContactError('');\n    const regex = /^\\d{10}$/;\n    if (regex.test(contactNo)) {\n      setContactError('');\n      return true;\n    } else {\n      if (contactNo.length === 0) {\n        setContactError('Contact number must not be blank.');\n      } else {\n        setContactError('Contact number must be exactly 10 digits and contain only numbers.');\n      }\n      return false;\n    }\n  };\n\n  const validateAddress = (e) => {\n    if ((e.target.value).length >= 0) {\n      setAddressReg(e.target.value);\n      setAddressError('');\n      return true;\n    } else {\n      setAddressError('Address cannot be blank.');\n      return false;\n    }\n  };\n\n  const register = () => {\n    if (!validateName({ target: { value: nameReg } })) {\n      setNameError('Enter valid name.');\n      return;\n    }\n    if (!validateEmail({ target: { value: emailReg } })) {\n      setEmailError('Invalid Email.');\n      return;\n    }\n    if (!validatePassword({ target: { value: passwordReg } })) {\n      setPasswordError('Password must be at least 8 characters long and contain both letters and numbers.');\n      return;\n    }\n    if (!validateContact({ target: { value: contactNoReg } })) {\n      setContactError('Contact number must be 10 digits.');\n      return;\n    }\n    if (!validateAddress({ target: { value: addressReg } })) {\n      setAddressError('Address cannot be blank.');\n      return;\n    }\n\n    // APIs\n    APIRegister().REGISTER({\n      name: nameReg,\n      email: emailReg,\n      password: passwordReg,\n      contact: contactNoReg,\n      address: addressReg,\n      status: statusReg,\n      role: roleReg\n    }).then((response) => {\n      console.log(response);\n      if (response.status && response.message === 'User registered successfully') {\n        setSuccessMessage('Registered successfully!');\n        setErrorMessage('');\n        setTimeout(() => {\n          window.location.reload();\n        }, 1000);\n      } else {\n        setErrorMessage('Unexpected response from server');\n        setSuccessMessage('');\n      }\n    }).catch((error) => {\n      console.error(\"Some error, solve it: \", error);\n      if (error.response && error.response.data) {\n        const errorMessage = error.response.data.message;\n        if (errorMessage === 'All fields are required') {\n          setErrorMessage('Please fill out all fields');\n        } else if (errorMessage === 'User already exists') {\n          setErrorMessage('Email or Contact No. is already used');\n        } else if (errorMessage === 'Firm ID is required for firm_user role' || errorMessage === 'This firm is already assigned to another user') {\n          setErrorMessage(errorMessage);\n        } else {\n          setErrorMessage('Something went wrong !!');\n        }\n      } else {\n        setErrorMessage('Something went wrong !!');\n      }\n      setSuccessMessage('');\n      setTimeout(() => {\n        window.location.reload();\n      }, 1000);\n    });\n  };\n\n  return (\n    <div className=\"signup_background\">\n      <Container className=\"d-flex justify-content-center mt-5\">\n        <Row className=\"w-100\">\n          <Col md={6} lg={5} className=\"mx-auto\">\n            <Card className=\"p-4\" id='card_border_color_change' style={{ boxShadow: \"4px 4px 80px rgb(5, 5, 5)\" }}>\n              <Form>\n                <h1 className=\"text-center\">Sign Up now</h1>\n                <InputGroup className=\"mb-3\">\n                  <Form.Control\n                    value={nameReg}\n                    onChange={validateName}\n                    type=\"text\"\n                    placeholder=\"Name\"\n                  />\n                </InputGroup>\n                {nameError && <div className=\"text-danger mb-2\">{nameError}</div>}\n                <InputGroup className=\"mb-3\">\n                  <Form.Control\n                    value={emailReg}\n                    onChange={validateEmail}\n                    type=\"email\"\n                    placeholder=\"Email\"\n                  />\n                </InputGroup>\n                {emailError && <div className=\"text-danger mb-2\">{emailError}</div>}\n                <InputGroup className=\"mb-3\">\n                  <Form.Control\n                    value={passwordReg}\n                    onChange={validatePassword}\n                    type={showPassword ? 'text' : 'password'} // Toggle password visibility\n                    placeholder=\"Password\"\n                  />\n                  <InputGroup.Text onClick={() => setShowPassword(!showPassword)} style={{ cursor: 'pointer' }}>\n                    {showPassword ? <FaEye /> : <FaEyeSlash />} {/* Toggle eye icon */}\n                  </InputGroup.Text>\n                </InputGroup>\n                {passwordError && <div className=\"text-danger mb-2\">{passwordError}</div>}\n                <InputGroup className=\"mb-3\">\n                  <Form.Control\n                    value={contactNoReg}\n                    onChange={validateContact}\n                    type=\"tel\"\n                    placeholder=\"Contact\"\n                  />\n                </InputGroup>\n                {contactError && <div className=\"text-danger mb-2\">{contactError}</div>}\n                <InputGroup className=\"mb-3\">\n                  <Form.Control\n                    value={addressReg}\n                    onChange={validateAddress}\n                    type=\"text\"\n                    placeholder=\"Address\"\n                  />\n                </InputGroup>\n                {addressError && <div className=\"text-danger mb-2\">{addressError}</div>}\n                <Row className=\"login_log_bt_row justify-content-center align-content-center mt-3\">\n                  <Col className=\"login_log_bt_col text-center\">\n                    <Button onClick={register} className=\"login_log_bt\" id='but_color'>\n                      Register\n                    </Button>\n                    {errorMessage && <div className=\"text-danger mt-2\">{errorMessage}</div>}\n                    {successMessage && <div className=\"text-success mt-2\">{successMessage}</div>}\n                  </Col>\n                </Row>\n                <Row className=\"login_signup_bt_row justify-content-center align-content-center mt-3\">\n                  <Col className=\"login_signup_bt_col text-center\">\n                    <Link to={'/'}>\n                      <Button className=\"login_signup_bt\" id='but_color'>\n                        Go for Login\n                      </Button>\n                    </Link>\n                  </Col>\n                </Row>\n              </Form>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default Signup;\n"],"names":["APIRegister","REGISTER","async","axios","post","concat","api_url","data","error","console","log","LOGIN","Signup","nameReg","setNameReg","useState","emailReg","setEmailReg","passwordReg","setPasswordReg","contactNoReg","setContactNoReg","addressReg","setAddressReg","nameError","setNameError","emailError","setEmailError","contactError","setContactError","passwordError","setPasswordError","addressError","setAddressError","successMessage","setSuccessMessage","errorMessage","setErrorMessage","showPassword","setShowPassword","validateName","useNavigate","e","target","value","length","test","validateEmail","validatePassword","password","validateContact","contactNo","validateAddress","_jsx","className","children","Container","Row","Col","md","lg","Card","id","style","boxShadow","_jsxs","Form","InputGroup","Control","onChange","type","placeholder","Text","onClick","cursor","FaEye","FaEyeSlash","Button","register","name","email","contact","address","status","role","then","response","message","setTimeout","window","location","reload","catch","Link","to"],"sourceRoot":""}