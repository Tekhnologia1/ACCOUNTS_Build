{"version":3,"file":"static/js/1023.5425122e.chunk.js","mappings":"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","sources":["api/APIRegister.js","api/APIURL.js","views/pages/signup/Signup.js"],"sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\n\n\nimport { api_url } from 'src/api/APIURL';\n\n\n\nconst APIRegister = () => {\n\n  //User_Reg\n  const REGISTER = async (data) => {\n    try {\n      const response = await axios.post(`${api_url}/api/users/register`, data);\n      return response.data;\n    } catch (error) {\n      console.log('Error registering:', error);\n      throw error;\n    }\n  };\n\n  // User_Login\n  const LOGIN = async (data) => {\n    try {\n      const response = await axios.post(`${api_url}/api/users/login`, data);\n      return response.data;\n    } catch (error) {\n      console.log('Invalid credentials:', error);\n      throw error;\n    }\n  };\n\n  // //User_Reset_Pass\n  // const RESET_PASS = async (data) => {\n  //   try {\n  //     const response = await axios.post(`${api_url}/Reset_Password/${data.mobileNo}`, { newPassword: data.newPassword });\n  //     return response.data;\n  //   } catch (error) {\n  //     console.log(\"Can't reset password:\", error);\n  //     throw error;\n  //   }\n  // };\n\n\n  // //Fill_ORG_Details\n  // // http://192.168.1.69:3002/Add_Institute/231     :userId\n  // const ORG_DETAILS = async (userId, data) => {\n  //   try {\n  //     const response = await axios.post(`${api_url}/Add_Institute/${userId}`, data);\n  //     return response.data;\n  //   } catch (error) {\n  //     console.log(\"Unable to add details\", error);\n  //     throw error;\n  //   }\n  // };\n\n\n  // //ADD_SCHOOL_OR_BRANCH\n  // // http://192.168.1.69:3002/Add_Branch/231/4    :userId/instituteId\n  // const ADD_SCHOOL_OR_BRANCH = async (userId, instituteId, data) => {\n  //   try {\n  //     const response = await axios.post(`${api_url}/Add_Branch/${userId}/${instituteId}`, data);\n  //     return response.data;\n  //   } catch (error) {\n  //     console.log(\"Unable to add branch:\", error);\n  //     throw error;\n  //   }\n  // };\n\n\n\n  // //REG_SCHOOL_OR_BRANCH-------//Add School details by Principal\n  // // http://192.168.1.69:3002/Register_Branch/2     :userId\n  // const REG_SCHOOL_OR_BRANCH = async (userId, data) => {\n  //   try {\n  //     const response = await axios.post(`${api_url}/Register_Branch/${userId}`, data);\n\n  //     return response.data;\n  //   } catch (error) {\n  //     console.log(\"Unable to add details:\", error);\n  //     throw error;\n  //   }\n  // };\n\n\n  // //Add_Individual_Personal_Details\n  // // http://192.168.1.69:3002/Add_Info_Indivisual/249   :userId\n  // const ADD_INDIV_PERSO = async (userId, data) => {\n  //   try {\n  //     const response = await axios.post(`${api_url}/Add_Info_Indivisual/${userId}`, data);\n  //     return response.data;\n  //   } catch (error) {\n  //     console.log(\"Unable to add details:\", error);\n  //     throw error;\n  //   }\n  // };\n\n  return { REGISTER, LOGIN };\n}\n\nexport { APIRegister };","export const api_url = 'http://15.206.84.226:3007';","import React, { useState } from 'react';\nimport { Button, Card, Col, Container, Form, Row, InputGroup } from 'react-bootstrap';\nimport { APIRegister } from 'src/api/APIRegister';\nimport { Link, useNavigate } from 'react-router-dom';\n\nconst Signup = () => {\n  const [nameReg, setNameReg] = useState('');\n  const [emailReg, setEmailReg] = useState('');\n  const [passwordReg, setPasswordReg] = useState('');\n  const [contactNoReg, setContactNoReg] = useState('');\n  const [addressReg, setAddressReg] = useState('');\n  const statusReg = \"1\";\n  const roleReg = \"1\";\n\n  const [nameError, setNameError] = useState('');\n  const [emailError, setEmailError] = useState('');\n  const [contactError, setContactError] = useState('');\n  const [passwordError, setPasswordError] = useState('');\n  const [addressError, setAddressError] = useState('');\n\n  const [successMessage, setSuccessMessage] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const navigate = useNavigate();\n\n  // Validation functions\n  const validateName = (e) => {\n    if ((e.target.value).length >= 0) {\n      setNameReg(e.target.value);\n      setNameError('');\n\n      const regex = /^[a-zA-Z\\s]+$/;\n      if (regex.test(nameReg)) {\n        setNameError('');\n        return true;\n      } else {\n        setNameError('Only letters and spaces are allowed and length should be more than one.');\n        return false;\n      }\n    } else {\n      setNameError('Name must not be blank.');\n      return false;\n    }\n  };\n\n  const validateEmail = (e) => {\n    if ((e.target.value).length >= 0) {\n      setEmailReg(e.target.value);\n      setEmailError('');\n\n      const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (regex.test(emailReg)) {\n        setEmailError('');\n        return true;\n      } else {\n        setEmailError('Enter valid email address.');\n        return false;\n      }\n    } else {\n      setEmailError('Email address must not be blank.');\n      return false;\n    }\n  };\n\n  const validatePassword = (e) => {\n    const password = e.target.value;\n    setPasswordReg(password);\n    \n    // Clear previous error messages\n    setPasswordError('');\n  \n    // Define the regex to match at least one letter, one number, and allow special characters\n    const regex = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d@$!%*?&]{8,}$/;\n  \n    // Check if the password matches the regex and is at least 8 characters long\n    if (regex.test(password)) {\n      setPasswordError('');\n      return true;\n    } else {\n      setPasswordError('Password must be at least 8 characters long and contain both letters and numbers.');\n      return false;\n    }\n  };\n\n  const validateContact = (e) => {\n    const contactNo = e.target.value;\n  \n    // Update the contact number state\n    setContactNoReg(contactNo);\n    \n    // Clear previous error messages\n    setContactError('');\n  \n    // Define the regex to match exactly 10 digits\n    const regex = /^\\d{10}$/;\n  \n    // Check if the contact number matches the regex\n    if (regex.test(contactNo)) {\n      setContactError('');\n      return true;\n    } else {\n      if (contactNo.length === 0) {\n        setContactError('Contact number must not be blank.');\n      } else {\n        setContactError('Contact number must be exactly 10 digits and contain only numbers.');\n      }\n      return false;\n    }\n  };\n  \n\n  const validateAddress = (e) => {\n    if ((e.target.value).length >= 0) {\n      setAddressReg(e.target.value);\n      setAddressError('');\n      return true;\n    } else {\n      setEmailError('Address cannot be blank.');\n      return false;\n    }\n  };\n\n  const register = () => {\n    if (!validateName({ target: { value: nameReg } })) {\n      setNameError('Enter valid Name.');\n      return;\n    }\n    if (!validateEmail({ target: { value: emailReg } })) {\n      setEmailError('Invalid Email.');\n      return;\n    }\n    if (!validatePassword({ target: { value: passwordReg } })) {\n      setPasswordError('Password must be at least 8 characters long and contain both letters and numbers.');\n      return;\n    }\n    if (!validateContact({ target: { value: contactNoReg } })) {\n      setContactError('Contact number must be 10 digits.');\n      return;\n    }\n    if (!validateAddress({ target: { value: addressReg } })) {\n      setAddressError('Address cannot be blank.');\n      return;\n    }\n\n    APIRegister().REGISTER({\n      name: nameReg,\n      email: emailReg,\n      password: passwordReg,\n      contact: contactNoReg,\n      address: addressReg,\n      status: statusReg,\n      role: roleReg\n    }).then((response) => {\n      console.log(response);\n\n      if (response.status && response.message === 'User registered successfully') {\n        setSuccessMessage('Registered successfully!');\n        setErrorMessage('');\n        setTimeout(() => {\n          window.location.reload();\n        }, 1000);\n\n      } else {\n        setErrorMessage('Unexpected response from server');\n        setSuccessMessage('');\n      }\n\n    }).catch((error) => {\n      console.error(\"Some error, solve it: \", error);\n      if (error.response && error.response.data) {\n        const errorMessage = error.response.data.message;\n        if (errorMessage === 'All fields are required') {\n          setErrorMessage('Please fill out all fields');\n        } else if (errorMessage === 'User already exists') {\n          setErrorMessage('Email or Contact No. is already used');\n        } else if (errorMessage === 'Firm ID is required for firm_user role' || errorMessage === 'This firm is already assigned to another user') {\n          setErrorMessage(errorMessage);\n        } else {\n          setErrorMessage('Something went wrong !!');\n        }\n      } else {\n        setErrorMessage('Something went wrong !!');\n      }\n      setSuccessMessage('');\n      setTimeout(() => {\n        window.location.reload();\n      }, 1000);\n    });\n  };\n\n  return (\n    <div className=\"signup_background\">\n      <Container className=\"d-flex justify-content-center mt-5\">\n        <Row className=\"w-100\">\n          <Col md={6} lg={5} className=\"mx-auto\">\n            <Card className=\"p-4\" id='card_border_color_change' style={{ boxShadow: \"4px 4px 80px rgb(5, 5, 5)\" }}>\n              <Form>\n                <h1 className=\"text-center\">Sign Up now</h1>\n                <InputGroup className=\"mb-3\">\n                  <Form.Control\n                    value={nameReg}\n                    onChange={validateName}\n                    type=\"text\"\n                    placeholder=\"Name\"\n                  />\n                </InputGroup>\n                {nameError && <div className=\"text-danger mb-2\">{nameError}</div>}\n                <InputGroup className=\"mb-3\">\n                  <Form.Control\n                    value={emailReg}\n                    onChange={validateEmail}\n                    type=\"email\"\n                    placeholder=\"Email\"\n                  />\n                </InputGroup>\n                {emailError && <div className=\"text-danger mb-2\">{emailError}</div>}\n                <InputGroup className=\"mb-3\">\n                  <Form.Control\n                    value={passwordReg}\n                    onChange={validatePassword}\n                    type=\"text\"\n                    placeholder=\"Password\"\n                  />\n                </InputGroup>\n                {passwordError && <div className=\"text-danger mb-2\">{passwordError}</div>}\n                <InputGroup className=\"mb-3\">\n                  <Form.Control\n                    value={contactNoReg}\n                    onChange={validateContact}\n                    type=\"tel\"\n                    placeholder=\"Contact\"\n                  />\n                </InputGroup>\n                {contactError && <div className=\"text-danger mb-2\">{contactError}</div>}\n                <InputGroup className=\"mb-3\">\n                  <Form.Control\n                    value={addressReg}\n                    onChange={validateAddress}\n                    type=\"text\"\n                    placeholder=\"Address\"\n                  />\n                </InputGroup>\n                {addressError && <div className=\"text-danger mb-2\">{addressError}</div>}\n                <Row className=\"mt-3\">\n                  <Col className=\"text-center\">\n                    <Button onClick={register} className=\"px-4\" id='but_color'>\n                      Register\n                    </Button>\n                    {errorMessage && <div className=\"text-danger mt-2\">{errorMessage}</div>}\n                    {successMessage && <div className=\"text-success mt-2\">{successMessage}</div>}\n                  </Col>\n                </Row>\n                <Row className=\"mt-3\">\n                  <Col className=\"text-center\">\n                    <Link to={'/'}>\n                      <Button className=\"px-4\" id='but_color'>\n                        Go for Login\n                      </Button>\n                    </Link>\n                  </Col>\n                </Row>\n              </Form>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default Signup;\n"],"names":["APIRegister","REGISTER","async","axios","post","concat","api_url","data","error","console","log","LOGIN","Signup","nameReg","setNameReg","useState","emailReg","setEmailReg","passwordReg","setPasswordReg","contactNoReg","setContactNoReg","addressReg","setAddressReg","nameError","setNameError","emailError","setEmailError","contactError","setContactError","passwordError","setPasswordError","addressError","setAddressError","successMessage","setSuccessMessage","errorMessage","setErrorMessage","validateName","useNavigate","e","target","value","length","test","validateEmail","validatePassword","password","validateContact","contactNo","validateAddress","_jsx","className","children","Container","Row","Col","md","lg","Card","id","style","boxShadow","_jsxs","Form","InputGroup","Control","onChange","type","placeholder","Button","onClick","register","name","email","contact","address","status","role","then","response","message","setTimeout","window","location","reload","catch","Link","to"],"sourceRoot":""}