{"version":3,"file":"static/js/8456.308f97ed.chunk.js","mappings":"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","sources":["api/APIURL.js","views/admin/Payments/MakePayment.js","../node_modules/@restart/ui/esm/Button.js","../node_modules/react-bootstrap/esm/Button.js"],"sourcesContent":["export const api_url = 'http://20.235.178.6:3007';","import React, { useContext, useEffect, useState } from 'react';\r\nimport { Container, Row, Col, Form, FormGroup, FormLabel, FormControl, Button, Card, Modal } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport { AdminSidebar, AdminHeader } from 'src/components';\r\nimport AllFirms_logo from 'src/assets/images/admin_dashboard_icons/AllFirms.png';\r\nimport { UserContext } from 'src/context/UserContextProvider';\r\nimport { api_url } from 'src/api/APIURL';\r\nimport payments from 'src/assets/icons/sidebar_icons/payments.png';\r\n\r\nconst MakePayment = () => {\r\n  const { user } = useContext(UserContext);\r\n  const userId = user.userId;\r\n\r\n  const [firms, setFirms] = useState([]);\r\n  const [selectedFromFirmId, setSelectedFromFirmId] = useState('');\r\n  const [selectedToFirmId, setSelectedToFirmId] = useState('');\r\n  const [fromGeneralLedgers, setFromGeneralLedgers] = useState([]);\r\n  const [toGeneralLedgers, setToGeneralLedgers] = useState([]);\r\n  const [selectedFromGLId, setSelectedFromGLId] = useState('');\r\n  const [selectedToGLId, setSelectedToGLId] = useState('');\r\n  const [amount, setAmount] = useState('');\r\n  const [remark, setRemark] = useState('');\r\n  const [transactionDate, setTransactionDate] = useState(new Date()); // New state for date\r\n  const [loadingFromGL, setLoadingFromGL] = useState(false);\r\n  const [loadingToGL, setLoadingToGL] = useState(false);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [validationMessage, setValidationMessage] = useState('');\r\n  const [modalTitle, setModalTitle] = useState('');\r\n  const [modalMessage, setModalMessage] = useState('');\r\n  const [showModalFooter, setShowModalFooter] = useState(false);\r\n  const [modalButtonText, setModalButtonText] = useState('');\r\n  const [isPaymentSuccess, setIsPaymentSuccess] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchFirms = async () => {\r\n      try {\r\n        const response = await fetch(`${api_url}/api/users/get_all_firms_by_user/${userId}`);\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch data');\r\n        }\r\n        const resdata = await response.json();\r\n        setFirms(resdata.data);\r\n      } catch (error) {\r\n        console.error('Error fetching firms:', error);\r\n      }\r\n    };\r\n    fetchFirms();\r\n  }, [userId]);\r\n\r\n  const fetchGeneralLedgers = async (firm_id) => {\r\n    try {\r\n      const response = await fetch(`${api_url}/api/users/get_general_ledgers/${firm_id}`);\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch data');\r\n      }\r\n      const data = await response.json();\r\n      return data.data;\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const loadGeneralLedgers = async () => {\r\n      if (selectedFromFirmId) {\r\n        setLoadingFromGL(true);\r\n        const generalLedgers = await fetchGeneralLedgers(selectedFromFirmId);\r\n        setFromGeneralLedgers(generalLedgers);\r\n        setLoadingFromGL(false);\r\n      }\r\n    };\r\n    loadGeneralLedgers();\r\n  }, [selectedFromFirmId]);\r\n\r\n  useEffect(() => {\r\n    const loadGeneralLedgers = async () => {\r\n      if (selectedToFirmId) {\r\n        setLoadingToGL(true);\r\n        const generalLedgers = await fetchGeneralLedgers(selectedToFirmId);\r\n        setToGeneralLedgers(generalLedgers);\r\n        setLoadingToGL(false);\r\n      }\r\n    };\r\n    loadGeneralLedgers();\r\n  }, [selectedToFirmId]);\r\n\r\n  const handleSavePayment = () => {\r\n    if (!amount || isNaN(amount) || Number(amount) <= 0) {\r\n      setValidationMessage('Please enter a valid, positive amount.');\r\n      return;\r\n    }\r\n\r\n    setValidationMessage('');\r\n    setShowModal(true);\r\n    setModalTitle('Confirm Payment');\r\n    setModalMessage('Are you sure you want to proceed with this payment?');\r\n    setShowModalFooter(true);\r\n    setModalButtonText('Confirm Payment');\r\n  };\r\n\r\n  const confirmPayment = async () => {\r\n    if (modalButtonText === 'Close') {\r\n      setShowModal(false);\r\n    } else {\r\n      try {\r\n        const payload = {\r\n          from_gl_id: selectedFromGLId,\r\n          to_gl_id: selectedToGLId,\r\n          amount: Number(amount),\r\n          from_firm_id: selectedFromFirmId,\r\n          to_firm_id: selectedToFirmId,\r\n          remark: remark,\r\n          trans_type: 'payment',\r\n          transaction_date: transactionDate.toLocaleDateString('en-CA', {\r\n            year: 'numeric',\r\n            month: '2-digit',\r\n            day: '2-digit',\r\n            hour: '2-digit',\r\n            minute: '2-digit',\r\n            second: '2-digit',\r\n            hour12: false,\r\n          }) // Added date to payload\r\n        };\r\n\r\n        const response = await fetch(`${api_url}/api/users/payment/${userId}`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify(payload)\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Failed to process payment');\r\n        }\r\n\r\n        const result = await response.json();\r\n        console.log(result);\r\n        console.log(transactionDate);\r\n        console.log(transactionDate.toLocaleDateString('en-CA', {\r\n          year: 'numeric',\r\n          month: '2-digit',\r\n          day: '2-digit',\r\n          hour: '2-digit',\r\n          minute: '2-digit',\r\n          second: '2-digit',\r\n          hour12: false,\r\n        }));\r\n\r\n        setModalTitle('Payment Status');\r\n        setModalMessage('Payment Successful !!');\r\n        setShowModalFooter(false);\r\n        setModalButtonText('Close');\r\n        refresh();\r\n      } catch (error) {\r\n        console.error('Error processing payment:', error);\r\n        setModalTitle('Payment Status');\r\n        setModalMessage('Payment Failed !!');\r\n        setShowModalFooter(false);\r\n        setModalButtonText('Close');\r\n      }\r\n    }\r\n  };\r\n\r\n  const refresh = () => {\r\n    setTimeout(() => {\r\n      window.location.reload();\r\n    }, 1000);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <AdminSidebar />\r\n      <div className=\"wrapper d-flex flex-column min-vh-100 bg-light\">\r\n        <AdminHeader />\r\n        <Container fluid className=\"flex-grow-1 px-3 px-md-5\">\r\n          <Row className='justify-content-center mb-3'>\r\n            <Col md={12}>\r\n              <Card className='card_border_color_change py-5' style={{ borderColor: \"white\" }}>\r\n                <Row className='align-items-center'>\r\n                  <Col style={{ marginLeft: \"11px\" }}>\r\n                    <Row className='allfirms_icon_title_row align-items-center'>\r\n                      <Col className='col-2 col-md-1'>\r\n                        <img className='sidebar_icon_color' src={payments} width={25} height={25} alt=\"All Firms Logo\" />\r\n                      </Col>\r\n                      <Col className='col-9 col-md-9'>\r\n                        <h5 className=\"title_font mb-0\" style={{ color: 'white' }}>Make Payment</h5>\r\n                      </Col>\r\n                    </Row>\r\n                  </Col>\r\n                  <Col className=\"col-5 makepay_allpay_but_col\">\r\n                    <Link to={'/all_payments'}>\r\n                      <Button id=\"but_color\" className='m-0'>All Payments</Button>\r\n                    </Link>\r\n                  </Col>\r\n                </Row>\r\n\r\n                <Row className='allfirms_table_row py-5 justify-content-center'>\r\n                  <Col className=\"make_pay_block_col mb-3 mb-md-0\">\r\n                    <Row className='justify-content-center'>\r\n                      <Col md={12}>\r\n                        <Card className='bg_color_blue_white'>\r\n                          <Card.Body>\r\n                            <Form>\r\n                              <FormGroup className=\"mb-3\" controlId=\"formTransactionID\">\r\n                                <FormLabel>Transaction :</FormLabel>\r\n                              </FormGroup>\r\n                              <FormGroup as={Row} className=\"mb-3\" controlId=\"formFrom\">\r\n                                <FormLabel column className='make_pay_lable' md={3}>From:</FormLabel>\r\n                                <Col className='make_pay_select_firm'>\r\n                                  <Form.Control\r\n                                    as=\"select\"\r\n                                    value={selectedFromFirmId}\r\n                                    className='form-select'\r\n                                    onChange={(e) => setSelectedFromFirmId(e.target.value)}\r\n                                  >\r\n                                    <option value=\"\">Select Firm</option>\r\n                                    {firms.map((firm) => (\r\n                                      <option key={firm.firm_id} value={firm.firm_id}>\r\n                                        {firm.firm_name}\r\n                                      </option>\r\n                                    ))}\r\n                                  </Form.Control>\r\n                                </Col>\r\n                                <Col className='make_pay_select_acc'>\r\n                                  <Form.Control\r\n                                    as=\"select\"\r\n                                    value={selectedFromGLId}\r\n                                    className='form-select'\r\n                                    onChange={(e) => setSelectedFromGLId(e.target.value)}\r\n                                    disabled={!selectedFromFirmId || loadingFromGL}\r\n                                  >\r\n                                    <option value=\"\">Select Your Firm Account</option>\r\n                                    {fromGeneralLedgers.map((gl) => (\r\n                                      <option key={gl.gl_id} value={gl.gl_id}>\r\n                                        {gl.gl_name}\r\n                                      </option>\r\n                                    ))}\r\n                                  </Form.Control>\r\n                                  {loadingFromGL && <div className=\"text-center mt-2\"><p>Loading accounts...</p></div>}\r\n                                </Col>\r\n                              </FormGroup>\r\n                              <FormGroup as={Row} className=\"mb-3\" controlId=\"formTo\">\r\n                                <FormLabel column className='make_pay_lable' md={3}>To:</FormLabel>\r\n                                <Col className='make_pay_select_firm'>\r\n                                  <Form.Control\r\n                                    as=\"select\"\r\n                                    value={selectedToFirmId}\r\n                                    className='form-select'\r\n                                    onChange={(e) => setSelectedToFirmId(e.target.value)}\r\n                                  >\r\n                                    <option value=\"\">Select Firm</option>\r\n                                    {firms.map((firm) => (\r\n                                      <option key={firm.firm_id} value={firm.firm_id}>\r\n                                        {firm.firm_name}\r\n                                      </option>\r\n                                    ))}\r\n                                  </Form.Control>\r\n                                </Col>\r\n                                <Col className='make_pay_select_acc'>\r\n                                  <Form.Control\r\n                                    as=\"select\"\r\n                                    value={selectedToGLId}\r\n                                    className='form-select'\r\n                                    onChange={(e) => setSelectedToGLId(e.target.value)}\r\n                                    disabled={!selectedToFirmId || loadingToGL}\r\n                                  >\r\n                                    <option value=\"\">Select Your Firm Account</option>\r\n                                    {toGeneralLedgers.map((gl) => (\r\n                                      <option key={gl.gl_id} value={gl.gl_id}>\r\n                                        {gl.gl_name}\r\n                                      </option>\r\n                                    ))}\r\n                                  </Form.Control>\r\n                                  {loadingToGL && <div className=\"text-center mt-2\"><p>Loading accounts...</p></div>}\r\n                                </Col>\r\n                              </FormGroup>\r\n                              <FormGroup as={Row} className=\"mb-3\" controlId=\"formAmount\">\r\n                                <FormLabel column className='make_pay_lable' md={3}>Amount:</FormLabel>\r\n                                <Col sm={4}>\r\n                                  <FormControl\r\n                                    type=\"text\"\r\n                                    placeholder=\"Enter Amount\"\r\n                                    value={amount}\r\n                                    onChange={(e) => setAmount(e.target.value)}\r\n                                  />\r\n                                </Col>\r\n                              </FormGroup>\r\n                              <FormGroup as={Row} className=\"mb-3\" controlId=\"formDate\">\r\n                                <FormLabel column className='make_pay_lable' md={3}>Date:</FormLabel>\r\n                                <Col sm={4}>\r\n                                  <DatePicker\r\n                                    selected={transactionDate}\r\n                                    onChange={(date) => setTransactionDate(date)}\r\n                                    showTimeSelect\r\n                                    dateFormat=\"MMMM d, yyyy h:mm aa\"\r\n                                    className=\"form-control\"\r\n                                  />\r\n                                </Col>\r\n                              </FormGroup>\r\n                              <FormGroup as={Row} className=\"mb-3\" controlId=\"formRemark\">\r\n                                <FormLabel column className='make_pay_lable' md={3}>Remark:</FormLabel>\r\n                                <Col md={9}>\r\n                                  <FormControl\r\n                                    type=\"text\"\r\n                                    placeholder=\"Enter Remark\"\r\n                                    value={remark}\r\n                                    onChange={(e) => setRemark(e.target.value)}\r\n                                  />\r\n                                </Col>\r\n                              </FormGroup>\r\n                              <FormGroup as={Row} className=\"mb-3 justify-content-center\">\r\n                                <Col md={4}>\r\n                                  <Button id=\"but_color\" className='m-0' onClick={handleSavePayment}>Make Payment</Button>\r\n                                </Col>\r\n                              </FormGroup>\r\n                              {validationMessage && <p className=\"text-danger text-center\">{validationMessage}</p>}\r\n                            </Form>\r\n                          </Card.Body>\r\n                        </Card>\r\n                      </Col>\r\n                    </Row>\r\n                  </Col>\r\n                </Row>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n      <Modal show={showModal} onHide={() => setShowModal(false)} centered>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>{modalTitle}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>{modalMessage}</Modal.Body>\r\n        {showModalFooter && (\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={() => setShowModal(false)}>Cancel</Button>\r\n            <Button variant=\"primary\" onClick={confirmPayment}>{modalButtonText}</Button>\r\n          </Modal.Footer>\r\n        )}\r\n        {!showModalFooter && (\r\n          <Modal.Footer>\r\n            <Button variant=\"primary\" onClick={confirmPayment}>{modalButtonText}</Button>\r\n          </Modal.Footer>\r\n        )}\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MakePayment;\r\n","const _excluded = [\"as\", \"disabled\"];\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function isTrivialHref(href) {\n  return !href || href.trim() === '#';\n}\nexport function useButtonProps({\n  tagName,\n  disabled,\n  href,\n  target,\n  rel,\n  role,\n  onClick,\n  tabIndex = 0,\n  type\n}) {\n  if (!tagName) {\n    if (href != null || target != null || rel != null) {\n      tagName = 'a';\n    } else {\n      tagName = 'button';\n    }\n  }\n  const meta = {\n    tagName\n  };\n  if (tagName === 'button') {\n    return [{\n      type: type || 'button',\n      disabled\n    }, meta];\n  }\n  const handleClick = event => {\n    if (disabled || tagName === 'a' && isTrivialHref(href)) {\n      event.preventDefault();\n    }\n    if (disabled) {\n      event.stopPropagation();\n      return;\n    }\n    onClick == null ? void 0 : onClick(event);\n  };\n  const handleKeyDown = event => {\n    if (event.key === ' ') {\n      event.preventDefault();\n      handleClick(event);\n    }\n  };\n  if (tagName === 'a') {\n    // Ensure there's a href so Enter can trigger anchor button.\n    href || (href = '#');\n    if (disabled) {\n      href = undefined;\n    }\n  }\n  return [{\n    role: role != null ? role : 'button',\n    // explicitly undefined so that it overrides the props disabled in a spread\n    // e.g. <Tag {...props} {...hookProps} />\n    disabled: undefined,\n    tabIndex: disabled ? undefined : tabIndex,\n    href,\n    target: tagName === 'a' ? target : undefined,\n    'aria-disabled': !disabled ? undefined : disabled,\n    rel: tagName === 'a' ? rel : undefined,\n    onClick: handleClick,\n    onKeyDown: handleKeyDown\n  }, meta];\n}\nconst Button = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n      as: asProp,\n      disabled\n    } = _ref,\n    props = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const [buttonProps, {\n    tagName: Component\n  }] = useButtonProps(Object.assign({\n    tagName: asProp,\n    disabled\n  }, props));\n  return /*#__PURE__*/_jsx(Component, Object.assign({}, props, buttonProps, {\n    ref: ref\n  }));\n});\nButton.displayName = 'Button';\nexport default Button;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useButtonProps } from '@restart/ui/Button';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Button = /*#__PURE__*/React.forwardRef(({\n  as,\n  bsPrefix,\n  variant = 'primary',\n  size,\n  active = false,\n  disabled = false,\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn');\n  const [buttonProps, {\n    tagName\n  }] = useButtonProps({\n    tagName: as,\n    disabled,\n    ...props\n  });\n  const Component = tagName;\n  return /*#__PURE__*/_jsx(Component, {\n    ...buttonProps,\n    ...props,\n    ref: ref,\n    disabled: disabled,\n    className: classNames(className, prefix, active && 'active', variant && `${prefix}-${variant}`, size && `${prefix}-${size}`, props.href && disabled && 'disabled')\n  });\n});\nButton.displayName = 'Button';\nexport default Button;"],"names":["api_url","MakePayment","user","useContext","UserContext","userId","firms","setFirms","useState","selectedFromFirmId","setSelectedFromFirmId","selectedToFirmId","setSelectedToFirmId","fromGeneralLedgers","setFromGeneralLedgers","toGeneralLedgers","setToGeneralLedgers","selectedFromGLId","setSelectedFromGLId","selectedToGLId","setSelectedToGLId","amount","setAmount","remark","setRemark","transactionDate","setTransactionDate","Date","loadingFromGL","setLoadingFromGL","loadingToGL","setLoadingToGL","showModal","setShowModal","validationMessage","setValidationMessage","modalTitle","setModalTitle","modalMessage","setModalMessage","showModalFooter","setShowModalFooter","modalButtonText","setModalButtonText","isPaymentSuccess","setIsPaymentSuccess","useEffect","async","response","fetch","concat","ok","Error","resdata","json","data","error","console","fetchFirms","fetchGeneralLedgers","firm_id","generalLedgers","loadGeneralLedgers","confirmPayment","payload","from_gl_id","to_gl_id","Number","from_firm_id","to_firm_id","trans_type","transaction_date","toLocaleDateString","year","month","day","hour","minute","second","hour12","method","headers","body","JSON","stringify","result","log","refresh","setTimeout","window","location","reload","_jsxs","children","_jsx","AdminSidebar","className","AdminHeader","Container","fluid","Row","Col","md","Card","style","borderColor","marginLeft","src","payments","width","height","alt","color","Link","to","Button","id","Body","Form","FormGroup","controlId","FormLabel","as","column","Control","value","onChange","e","target","map","firm","firm_name","disabled","gl","gl_id","gl_name","sm","FormControl","type","placeholder","DatePicker","selected","date","showTimeSelect","dateFormat","onClick","handleSavePayment","isNaN","Modal","show","onHide","centered","Header","closeButton","Title","Footer","variant","_excluded","useButtonProps","_ref2","tagName","href","rel","role","tabIndex","meta","handleClick","event","trim","isTrivialHref","preventDefault","stopPropagation","undefined","onKeyDown","key","React","_ref","ref","asProp","props","source","excluded","i","sourceKeys","Object","keys","length","indexOf","_objectWithoutPropertiesLoose","buttonProps","Component","assign","displayName","bsPrefix","size","active","prefix","useBootstrapPrefix","classNames"],"sourceRoot":""}