{"version":3,"file":"static/js/876.b01b5e3d.chunk.js","mappings":"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","sources":["api/APIURL.js","views/admin/Payments/MakePayment.js"],"sourcesContent":["export const api_url = 'http://3.111.33.23:3007';","import React, { useContext, useEffect, useState } from 'react';\nimport { Container, Row, Col, Form, FormGroup, FormLabel, FormControl, Button, Card, Modal } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport AdminSidebar from 'src/components/admincomponents/AdminSidebar';\nimport AdminHeader from 'src/components/admincomponents/AdminHeader';\nimport AllFirms_logo from 'src/assets/images/admin_dashboard_icons/AllFirms.png';\nimport { UserContext } from 'src/context/UserContextProvider';\nimport { api_url } from 'src/api/APIURL';\nimport { Auth } from 'src/auth/AuthUser';\n\n\nconst MakePayment = () => {\n  const { user } = useContext(UserContext);\n  const userId = user.userId;\n  useEffect(() => {\n    console.log(userId);\n  \n  }, [userId])\n  \n  const [firms, setFirms] = useState([]);\n  const [selectedFromFirmId, setSelectedFromFirmId] = useState('');\n  const [selectedToFirmId, setSelectedToFirmId] = useState('');\n  const [fromGeneralLedgers, setFromGeneralLedgers] = useState([]);\n  const [toGeneralLedgers, setToGeneralLedgers] = useState([]);\n  const [selectedFromGLId, setSelectedFromGLId] = useState('');\n  const [selectedToGLId, setSelectedToGLId] = useState('');\n  const [amount, setAmount] = useState('');\n  const [loadingFromGL, setLoadingFromGL] = useState(false);\n  const [loadingToGL, setLoadingToGL] = useState(false);\n  \n  const [showModal, setShowModal] = useState(false); // State to control modal visibility\n\n  useEffect(() => {\n    const fetchFirms = async () => {\n      try {\n        const response = await fetch(`${api_url}/api/users/get_all_firms_by_user/${userId}`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch data');\n        }\n        const resdata = await response.json();\n        setFirms(resdata.data);\n      } catch (error) {\n        console.error('Error fetching firms:', error);\n      }\n    };\n    fetchFirms();\n  }, [userId]);\n\n  const fetchGeneralLedgers = async (firm_id) => {\n    try {\n      const response = await fetch(`${api_url}/api/users/get_general_ledgers/${firm_id}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch data');\n      }\n      const data = await response.json();\n      return data.data;\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n\n  useEffect(() => {\n    const loadGeneralLedgers = async () => {\n      if (selectedFromFirmId) {\n        setLoadingFromGL(true);\n        const generalLedgers = await fetchGeneralLedgers(selectedFromFirmId);\n        setFromGeneralLedgers(generalLedgers);\n        setLoadingFromGL(false);\n      }\n    };\n    loadGeneralLedgers();\n  }, [selectedFromFirmId]);\n\n  useEffect(() => {\n    const loadGeneralLedgers = async () => {\n      if (selectedToFirmId) {\n        setLoadingToGL(true);\n        const generalLedgers = await fetchGeneralLedgers(selectedToFirmId);\n        setToGeneralLedgers(generalLedgers);\n        setLoadingToGL(false);\n      }\n    };\n    loadGeneralLedgers();\n  }, [selectedToFirmId]);\n\n  const handleSavePayment = async () => {\n    setShowModal(true); // Show modal on button click\n  };\n\n  const confirmPayment = async () => {\n    try {\n      const payload = {\n        from_gl_id: selectedFromGLId,\n        to_gl_id: selectedToGLId,\n        amount: Number(amount),\n        from_firm_id: selectedFromFirmId,\n        to_firm_id: selectedToFirmId\n      };\n\n      const response = await fetch(`${api_url}/api/users/payment/${userId}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to process payment');\n      }\n\n      const result = await response.json();\n      console.log(result);\n      alert('Payment successful');\n      setShowModal(false); // Close modal after successful payment\n      // Optionally reload or update data after successful payment\n    } catch (error) {\n      console.error('Error processing payment:', error);\n      alert('Payment failed');\n    }\n  };\n\n  return (\n    <div>\n      <AdminSidebar />\n      <div className=\"wrapper d-flex flex-column min-vh-100 bg-light\">\n        <AdminHeader />\n        <Container fluid className=\"flex-grow-1 px-3 px-md-5\">\n          <Row className='justify-content-center mb-3'>\n            <Col md={12}>\n              <Card className='card_border_color_change py-5' style={{ borderColor: \"white\" }}>\n                <Row className='allfirms_title_mainrow'>\n                  <Col md={9} style={{ marginLeft: \"10px\" }}>\n                    <Row className='allfirms_title_row py-1 align-items-center'>\n                      <Col md={1}>\n                        <img className='' src={AllFirms_logo} width={25} height={25} alt=\"AllFirms Logo\" />\n                      </Col>\n                      <Col md={4}>\n                        <h4>Payments</h4>\n                      </Col>\n                    </Row>\n                  </Col>\n                  <Col md={2} className='d-flex align-items-center justify-content-end'>\n                    <Link to={'/all_payments'}>\n                      <Button id=\"but_color\">All Payments</Button>\n                    </Link>\n                  </Col>\n                </Row>\n\n                <Row className='allfirms_table_row py-5 justify-content-center'>\n                  <Col md={6} className=\"mb-3 mb-md-0\">\n                    <Row className='justify-content-center'>\n                      <Col md={12}>\n                        <Card className='bg_color_blue_white'>\n                          <Card.Body>\n                            <Form>\n                              <FormGroup className=\"mb-3\" controlId=\"formTransactionID\">\n                                <FormLabel>Transaction ID / SD101D</FormLabel>\n                              </FormGroup>\n                              <FormGroup as={Row} className=\"mb-3\" controlId=\"formFrom\">\n                                <FormLabel column sm={2}>From:</FormLabel>\n                                <Col sm={5}>\n                                  <Form.Control\n                                    as=\"select\"\n                                    value={selectedFromFirmId}\n                                    className='form-select'\n                                    onChange={(e) => setSelectedFromFirmId(e.target.value)}\n                                  >\n                                    <option value=\"\">Select Firm</option>\n                                    {firms.map((firm) => (\n                                      <option key={firm.firm_id} value={firm.firm_id}>\n                                        {firm.firm_name}\n                                      </option>\n                                    ))}\n                                  </Form.Control>\n                                </Col>\n                                <Col sm={5}>\n                                  <Form.Control\n                                    as=\"select\"\n                                    value={selectedFromGLId}\n                                    className='form-select'\n                                    onChange={(e) => setSelectedFromGLId(e.target.value)}\n                                    disabled={loadingFromGL}\n                                  >\n                                    <option value=\"\">General Ledgers</option>\n                                    {fromGeneralLedgers.map((gl) => (\n                                      <option key={gl.gl_id} value={gl.gl_id}>\n                                        {gl.gl_name}\n                                      </option>\n                                    ))}\n                                  </Form.Control>\n                                  {loadingFromGL && <p>Loading...</p>}\n                                </Col>\n                              </FormGroup>\n                              <FormGroup as={Row} className=\"mb-3\" controlId=\"formTo\">\n                                <FormLabel column sm={2}>To:</FormLabel>\n                                <Col sm={5}>\n                                  <Form.Control\n                                    as=\"select\"\n                                    value={selectedToFirmId}\n                                    className='form-select'\n                                    onChange={(e) => setSelectedToFirmId(e.target.value)}\n                                  >\n                                    <option value=\"\">Select Firm</option>\n                                    {firms.map((firm) => (\n                                      <option key={firm.firm_id} value={firm.firm_id}>\n                                        {firm.firm_name}\n                                      </option>\n                                    ))}\n                                  </Form.Control>\n                                </Col>\n                                <Col sm={5}>\n                                  <Form.Control\n                                    as=\"select\"\n                                    value={selectedToGLId}\n                                    className='form-select'\n                                    onChange={(e) => setSelectedToGLId(e.target.value)}\n                                    disabled={loadingToGL}\n                                  >\n                                    <option value=\"\">General Ledgers</option>\n                                    {toGeneralLedgers.map((gl) => (\n                                      <option key={gl.gl_id} value={gl.gl_id}>\n                                        {gl.gl_name}\n                                      </option>\n                                    ))}\n                                  </Form.Control>\n                                  {loadingToGL && <p>Loading...</p>}\n                                </Col>\n                              </FormGroup>\n                              <FormGroup as={Row} className=\"mb-3\" controlId=\"formAmount\">\n                                <FormLabel column sm={2}>Amount :</FormLabel>\n                                <Col sm={5}>\n                                  <FormControl\n                                    type=\"text\"\n                                    placeholder=\"Amount\"\n                                    value={amount}\n                                    onChange={(e) => setAmount(e.target.value)}\n                                  />\n                                </Col>\n                              </FormGroup>\n                            </Form>\n                          </Card.Body>\n                        </Card>\n                        <Row className='justify-content-center mt-3'>\n                          <Button className='col-md-3 col-6' id='but_color' onClick={handleSavePayment}>Pay</Button>\n                        </Row>\n                      </Col>\n                    </Row>\n                  </Col>\n                </Row>\n              </Card>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n\n      {/* Confirmation Modal */}\n      <Modal show={showModal} onHide={() => setShowModal(false)} centered>\n        <Modal.Header closeButton>\n          <Modal.Title>Confirm Payment</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          Are you sure you want to proceed with this payment?\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={() => setShowModal(false)}>\n            Cancel\n          </Button>\n          <Button variant=\"primary\" onClick={confirmPayment}>\n            Confirm Payment\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n}\n\nexport default MakePayment;\n"],"names":["api_url","MakePayment","user","useContext","UserContext","userId","useEffect","console","log","firms","setFirms","useState","selectedFromFirmId","setSelectedFromFirmId","selectedToFirmId","setSelectedToFirmId","fromGeneralLedgers","setFromGeneralLedgers","toGeneralLedgers","setToGeneralLedgers","selectedFromGLId","setSelectedFromGLId","selectedToGLId","setSelectedToGLId","amount","setAmount","loadingFromGL","setLoadingFromGL","loadingToGL","setLoadingToGL","showModal","setShowModal","async","response","fetch","concat","ok","Error","resdata","json","data","error","fetchFirms","fetchGeneralLedgers","firm_id","generalLedgers","loadGeneralLedgers","_jsxs","children","_jsx","AdminSidebar","className","AdminHeader","Container","fluid","Row","Col","md","Card","style","borderColor","marginLeft","src","AllFirms_logo","width","height","alt","Link","to","Button","id","Body","Form","FormGroup","controlId","FormLabel","as","column","sm","Control","value","onChange","e","target","map","firm","firm_name","disabled","gl","gl_id","gl_name","FormControl","type","placeholder","onClick","Modal","show","onHide","centered","Header","closeButton","Title","Footer","variant","payload","from_gl_id","to_gl_id","Number","from_firm_id","to_firm_id","method","headers","body","JSON","stringify","result","alert"],"sourceRoot":""}