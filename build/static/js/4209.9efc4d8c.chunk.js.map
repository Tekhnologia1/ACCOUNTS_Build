{"version":3,"file":"static/js/4209.9efc4d8c.chunk.js","mappings":"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","sources":["api/APIURL.js","views/admin/Payments/AllPayments.js"],"sourcesContent":["export const api_url = 'http://65.0.139.50:3007';","import React, { useState, useEffect, useContext } from 'react';\nimport { CButton, CCard, CCol, CImage, CRow } from '@coreui/react';\nimport { AdminHeader, AdminSidebar } from 'src/components';\nimport AllFirms_logo from 'src/assets/images/admin_dashboard_icons/AllFirms.png';\nimport { Col, Form, FormControl, FormGroup, Row, Card, Table } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { UserContext } from 'src/context/UserContextProvider';\nimport { api_url } from 'src/api/APIURL';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nconst AllPayments = () => {\n  const { user } = useContext(UserContext);\n  const userId = user.userId;\n  const [firms, setFirms] = useState([]);\n  const [selectedFirmId, setSelectedFirmId] = useState('');\n  const [transactions, setTransactions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [totalBalance, setTotalBalance] = useState(null);\n  const [hasTransactions, setHasTransactions] = useState(true);\n  const [startDate, setStartDate] = useState(null);\n  const [endDate, setEndDate] = useState(null);\n\n  useEffect(() => {\n    const fetchFirms = async () => {\n      try {\n        const response = await fetch(`${api_url}/api/users/get_all_firms_by_user/${userId}`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch firms');\n        }\n        const resdata = await response.json();\n        setFirms(resdata.data);\n      } catch (error) {\n        console.error('Error fetching firms:', error);\n      }\n    };\n    fetchFirms();\n  }, [userId]);\n\n  useEffect(() => {\n    fetchTransactions();\n  }, [selectedFirmId]);\n\n  useEffect(() => {\n    const fetchTotalBalance = async () => {\n      if (selectedFirmId) {\n        try {\n          const firm_id = selectedFirmId;\n          const response = await fetch(`${api_url}/api/users/firm_total_bal/${firm_id}`);\n          if (!response.ok) {\n            throw new Error('Failed to fetch total balance');\n          }\n          const resdata = await response.json();\n          setTotalBalance(resdata.data.totalBalance);\n        } catch (error) {\n          console.error('Error fetching total balance:', error);\n        }\n      }\n    };\n    fetchTotalBalance();\n  }, [selectedFirmId]);\n\n  const fetchTransactions = async () => {\n    if (selectedFirmId) {\n      setLoading(true);\n      try {\n        const firm_id = selectedFirmId;\n        let url = `${api_url}/api/users/show_payment_transac/${firm_id}`;\n\n        if (startDate) {\n          const formattedStartDate = startDate.toLocaleDateString('en-CA'); // Format as YYYY-MM-DD\n          url += `?startDate=${formattedStartDate}`;\n        }\n        if (endDate) {\n          const adjustedEndDate = new Date(endDate);\n          adjustedEndDate.setDate(adjustedEndDate.getDate() + 1);\n          const formattedEndDate = adjustedEndDate.toLocaleDateString('en-CA'); // Format as YYYY-MM-DD\n          url += startDate ? `&endDate=${formattedEndDate}` : `?endDate=${formattedEndDate}`;\n        }\n\n        const response = await fetch(url);\n        const resdata = await response.json();\n        if (!response.ok || resdata.status === false) {\n          setHasTransactions(false);\n          setTransactions([]);\n          return;\n        }\n        setTransactions(resdata.data);\n        setHasTransactions(resdata.data.length > 0);\n      } catch (error) {\n        console.error('Error fetching transactions:', error);\n        setHasTransactions(false);\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  return (\n    <div>\n      <AdminSidebar />\n      <div className=\"wrapper d-flex flex-column min-vh-100 bg-light\">\n        <AdminHeader />\n        <div className=\"body flex-grow-1 px-5\">\n          <CRow className='justify-content-center mb-3'>\n            <CCol md={12}>\n              <CCard className='card_border_color_change py-5' style={{ borderColor: \"white\" }}>\n                <CRow className='allfirms_title_mainrow'>\n                  <CCol md={8} style={{ marginLeft: \"10px\" }}>\n                    <CRow className='allfirms_title_row py-1 align-items-center'>\n                      <CCol md={1}>\n                        <CImage className='' src={AllFirms_logo} width={25} height={25} />\n                      </CCol>\n                      <CCol md={5}>\n                        <h4>All Payments</h4>\n                      </CCol>\n                    </CRow>\n                  </CCol>\n                  <CCol md={3} className='align-content-center justify-content-end'>\n                    <Link to={'/make_payment'}>\n                      <CButton id=\"but_color\">Make A Payment</CButton>\n                    </Link>\n                  </CCol>\n                </CRow>\n\n                <CRow className='allfirms_table_row py-5 justify-content-center'>\n                  <CCol>\n                    {/* <CRow className='justify-content-center'>\n                      <CCol md={2}>\n                        <Form>\n                          <FormGroup as={Row} className=\"mb-3\" controlId=\"formUserType\">\n                            <Col>\n                              <Form.Check\n                                type=\"radio\"\n                                label=\"Firm\"\n                                name=\"userType\"\n                                id=\"firm\"\n                                inline\n                                defaultChecked\n                              />\n                              <Form.Check\n                                type=\"radio\"\n                                label=\"User\"\n                                name=\"userType\"\n                                id=\"user\"\n                                inline\n                              />\n                            </Col>\n                          </FormGroup>\n                        </Form>\n                      </CCol>\n                    </CRow> */}\n                    <CRow className='justify-content-start mb-3'>\n                      <CCol md={8} className=\"justify-content-start justify-content-md-start\" style={{paddingLeft: \"200px\"}}>\n                        <Form>\n                          <FormGroup as={Row} className=\"mb-3\">\n                            <Col md={11} className=\"justify-content-start justify-content-md-start\">\n                              {/* <Form.Label className=\"col-md-5 mb-0\">Select Firm</Form.Label> */}\n                              <FormControl\n                                as=\"select\"\n                                value={selectedFirmId}\n                                className=\"form-select\"\n                                onChange={(e) => setSelectedFirmId(e.target.value)}\n                                style={{ maxWidth: '100%' }} // Adjust the width as needed\n                              >\n                                <option value=\"\">Select Firm</option>\n                                {firms.map((firm) => (\n                                  <option key={firm.firm_id} value={firm.firm_id}>\n                                    {firm.firm_name}\n                                  </option>\n                                ))}\n                              </FormControl>\n                            </Col>\n                          </FormGroup>\n                        </Form>\n                      </CCol>\n\n                      <CCol md={4} className=\"d-flex align-items-center justify-content-center justify-content-md-end mt-3 mt-md-0\">\n                        {totalBalance !== null && (\n                          <div style={{\n                            backgroundColor: 'green',\n                            color: 'white',\n                            padding: '10px',\n                            borderRadius: '5px'\n                          }}>\n                            Firm Total Balance: {totalBalance}\n                          </div>\n                        )}\n                      </CCol>\n                    </CRow>\n\n                    <CRow className='justify-content-center mb-3'>\n                      <CCol md={9} className=\"d-flex justify-content-md-between\">\n                        <DatePicker\n                          selected={startDate}\n                          onChange={(date) => setStartDate(date)}\n                          selectsStart\n                          startDate={startDate}\n                          endDate={endDate}\n                          placeholderText=\"Start Date\"\n                          className=\"form-control\"\n                          md={3}\n                          \n                        />\n                        <DatePicker\n                          selected={endDate}\n                          onChange={(date) => setEndDate(date)}\n                          selectsEnd\n                          startDate={startDate}\n                          endDate={endDate}\n                          minDate={startDate}\n                          placeholderText=\"End Date\"\n                          className=\"form-control\"\n                          md={3}\n                          \n                        />\n                        <CButton onClick={fetchTransactions} id=\"but_color\" md={2}>Filter</CButton>\n                      </CCol>\n                    </CRow>\n\n                    <CRow>\n                      <Col md={12}>\n                        <Form>\n                          <Card className=\"mb-3\">\n                            <Card.Header className=\"text-white\" id='bg__color'>Payment Transactions</Card.Header>\n                            <Card.Body>\n                              {loading ? (\n                                <p>Loading...</p>\n                              ) : !hasTransactions ? (\n                                <p>No Transactions for this firm</p>\n                              ) : (\n                                <Table striped bordered hover responsive>\n                                  <thead>\n                                    <tr>\n                                      <th>Sr.No</th>\n                                      <th>From Account</th>\n                                      <th>To Firm & Account</th>\n                                      <th>Dr</th>\n                                      <th>Date</th>\n                                    </tr>\n                                  </thead>\n                                  <tbody>\n                                    {transactions.map((transaction, index) => (\n                                      <tr key={transaction.transaction_id}>\n                                        <td>{index + 1}</td>\n                                        <td>{transaction.from_gl_name}</td>\n                                        <td>{transaction.to_firm_name} - {transaction.to_gl_name}</td>\n                                        <td style={{ color: \"red\" }}>-{transaction.amount}</td>\n                                        <td>{new Date(transaction.transaction_date).toLocaleString()}</td>\n                                      </tr>\n                                    ))}\n                                  </tbody>\n                                </Table>\n                              )}\n                            </Card.Body>\n                          </Card>\n                        </Form>\n                      </Col>\n                    </CRow>\n                  </CCol>\n                </CRow>\n              </CCard>\n            </CCol>\n          </CRow>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AllPayments;\n"],"names":["api_url","AllPayments","user","useContext","UserContext","userId","firms","setFirms","useState","selectedFirmId","setSelectedFirmId","transactions","setTransactions","loading","setLoading","totalBalance","setTotalBalance","hasTransactions","setHasTransactions","startDate","setStartDate","endDate","setEndDate","useEffect","async","response","fetch","concat","ok","Error","resdata","json","data","error","console","fetchFirms","fetchTransactions","firm_id","fetchTotalBalance","url","formattedStartDate","toLocaleDateString","adjustedEndDate","Date","setDate","getDate","formattedEndDate","status","length","_jsxs","children","_jsx","AdminSidebar","className","AdminHeader","CRow","CCol","md","CCard","style","borderColor","marginLeft","CImage","src","AllFirms_logo","width","height","Link","to","CButton","id","paddingLeft","Form","FormGroup","as","Row","Col","FormControl","value","onChange","e","target","maxWidth","map","firm","firm_name","backgroundColor","color","padding","borderRadius","DatePicker","selected","date","selectsStart","placeholderText","selectsEnd","minDate","onClick","Card","Header","Body","Table","striped","bordered","hover","responsive","transaction","index","from_gl_name","to_firm_name","to_gl_name","amount","transaction_date","toLocaleString","transaction_id"],"sourceRoot":""}