{"version":3,"file":"static/js/3599.d2e425a8.chunk.js","mappings":"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","sources":["api/APIURL.js","views/admin/Receipts/CreateReceipt.js","../node_modules/@restart/ui/esm/Button.js","../node_modules/react-bootstrap/esm/Button.js"],"sourcesContent":["export const api_url = 'http://20.235.178.6:3007';","import React, { useContext, useEffect, useState } from 'react';\r\nimport { Container, Row, Col, Form, FormGroup, FormLabel, FormControl, Button, Card, Modal } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport { AdminSidebar, AdminHeader } from 'src/components';\r\nimport AllFirms_logo from 'src/assets/images/admin_dashboard_icons/AllFirms.png';\r\nimport { UserContext } from 'src/context/UserContextProvider';\r\nimport { api_url } from 'src/api/APIURL';\r\nimport receipts from 'src/assets/icons/sidebar_icons/receipts.png'\r\n\r\n\r\nconst CreateReceipt = () => {\r\n    const { user } = useContext(UserContext);\r\n    const userId = user.userId;\r\n\r\n    const [firms, setFirms] = useState([]);\r\n    const [selectedFromFirmId, setSelectedFromFirmId] = useState('');\r\n    const [selectedToFirmId, setSelectedToFirmId] = useState('');\r\n    const [fromGeneralLedgers, setFromGeneralLedgers] = useState([]);\r\n    const [toGeneralLedgers, setToGeneralLedgers] = useState([]);\r\n    const [selectedFromGLId, setSelectedFromGLId] = useState('');\r\n    const [selectedToGLId, setSelectedToGLId] = useState('');\r\n    const [amount, setAmount] = useState('');\r\n    const [remark, setRemark] = useState('');\r\n    const [transactionDate, setTransactionDate] = useState(new Date()); // New state for date\r\n    const [loadingFromGL, setLoadingFromGL] = useState(false);\r\n    const [loadingToGL, setLoadingToGL] = useState(false);\r\n    const [amountError, setAmountError] = useState(''); // New state for amount error\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [modalTitle, setModalTitle] = useState('');\r\n    const [modalMessage, setModalMessage] = useState('');\r\n    const [modalButtonText, setModalButtonText] = useState('');\r\n\r\n    useEffect(() => {\r\n        const fetchFirms = async () => {\r\n            try {\r\n                const response = await fetch(`${api_url}/api/users/get_all_firms_by_user/${userId}`);\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch data');\r\n                }\r\n                const resdata = await response.json();\r\n                setFirms(resdata.data);\r\n            } catch (error) {\r\n                console.error('Error fetching firms:', error);\r\n            }\r\n        };\r\n        fetchFirms();\r\n    }, [userId]);\r\n\r\n    const fetchGeneralLedgers = async (firm_id) => {\r\n        try {\r\n            const response = await fetch(`${api_url}/api/users/get_general_ledgers/${firm_id}`);\r\n            if (!response.ok) {\r\n                throw new Error('No GLs here');\r\n            }\r\n            const data = await response.json();\r\n            return data.data;\r\n        } catch (error) {\r\n            console.error('Error fetching data of GLs:', error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const loadGeneralLedgers = async () => {\r\n            if (selectedFromFirmId) {\r\n                setLoadingFromGL(true);\r\n                const generalLedgers = await fetchGeneralLedgers(selectedFromFirmId);\r\n                setFromGeneralLedgers(generalLedgers);\r\n                setLoadingFromGL(false);\r\n            }\r\n        };\r\n        loadGeneralLedgers();\r\n    }, [selectedFromFirmId]);\r\n\r\n    useEffect(() => {\r\n        const loadGeneralLedgers = async () => {\r\n            if (selectedToFirmId) {\r\n                setLoadingToGL(true);\r\n                const generalLedgers = await fetchGeneralLedgers(selectedToFirmId);\r\n                setToGeneralLedgers(generalLedgers);\r\n                setLoadingToGL(false);\r\n            }\r\n        };\r\n        loadGeneralLedgers();\r\n    }, [selectedToFirmId]);\r\n\r\n    const handleSaveReceipt = () => {\r\n        // Reset the amount error state\r\n        setAmountError('');\r\n\r\n        // Validate amount\r\n        if (!amount || isNaN(amount) || Number(amount) <= 0) {\r\n            setAmountError('Please enter a valid amount greater than zero.');\r\n            return;\r\n        }\r\n\r\n        // Show the confirmation modal\r\n        setShowModal(true);\r\n        setModalTitle('Confirm Receipt');\r\n        setModalMessage('Are you sure you want to create this receipt?');\r\n        setModalButtonText('Confirm');\r\n    };\r\n\r\n    const confirmReceipt = async () => {\r\n        if (modalButtonText === 'Close') {\r\n            setShowModal(false);\r\n        } else {\r\n\r\n            try {\r\n                const payload = {\r\n                    to_firm_id: selectedToFirmId,\r\n                    to_gl_id: selectedToGLId,\r\n                    from_firm_id: selectedFromFirmId,\r\n                    from_gl_id: selectedFromGLId,\r\n                    amount: Number(amount),\r\n                    remark: remark,\r\n                    trans_type: 'receipt',\r\n                    transaction_date: transactionDate.toLocaleDateString('en-CA', {\r\n                        year: 'numeric',\r\n                        month: '2-digit',\r\n                        day: '2-digit',\r\n                        hour: '2-digit',\r\n                        minute: '2-digit',\r\n                        second: '2-digit',\r\n                        hour12: false,\r\n                    }) // Added date to payload\r\n                };\r\n\r\n                const response = await fetch(`${api_url}/api/users/receipt/${userId}`, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify(payload)\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to process receipt');\r\n                }\r\n\r\n                const result = await response.json();\r\n                console.log(result);\r\n                console.log(transactionDate);\r\n                console.log(transactionDate.toLocaleDateString('en-CA', {\r\n                    year: 'numeric',\r\n                    month: '2-digit',\r\n                    day: '2-digit',\r\n                    hour: '2-digit',\r\n                    minute: '2-digit',\r\n                    second: '2-digit',\r\n                    hour12: false,\r\n                }));\r\n\r\n                // Show success modal\r\n                setShowModal(true);\r\n                setModalTitle('Receipt Status');\r\n                setModalMessage('Amount Received !!');\r\n                setModalButtonText('Close');\r\n\r\n                setTimeout(() => {\r\n                    window.location.reload();\r\n                }, 1000);\r\n            } catch (error) {\r\n                console.error('Error processing receipt:', error);\r\n\r\n                // Show failure modal\r\n                setShowModal(true);\r\n                setModalTitle('Receipt Status');\r\n                setModalMessage('Receipt Failed !!');\r\n                setModalButtonText('Close');\r\n            }\r\n        }\r\n\r\n\r\n\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <AdminSidebar />\r\n            <div className=\"wrapper d-flex flex-column min-vh-100 bg-light\">\r\n                <AdminHeader />\r\n                <div className=\"flex-grow-1 px-3 px-md-5\">\r\n                    <Row className=\"justify-content-center mb-3\">\r\n                        <Col xs={12}>\r\n                            <Card className=\"card_border_color_change py-5\" style={{ borderColor: \"white\" }}>\r\n                                <Row className='align-items-center'>\r\n                                    <Col style={{ marginLeft: \"11px\" }}>\r\n                                        <Row className='allfirms_icon_title_row align-items-center'>\r\n                                            <Col className='col-2 col-md-1'>\r\n                                                <img className='sidebar_icon_color' src={receipts} width={25} height={25} alt=\"All Firms Logo\" />\r\n                                            </Col>\r\n                                            <Col className='col-9 col-md-9'>\r\n                                                <h5 className=\"title_font mb-0\" style={{ color: 'white' }}>Create Receipt</h5>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Col>\r\n                                    <Col className=\"col-5 crearecp_allrecp_but_col\">\r\n                                        <Link to={'/all_receipts'}>\r\n                                            <Button id=\"but_color\" className='m-0'>All Receipts</Button>\r\n                                        </Link>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <Row className=\"allfirms_table_row py-5 justify-content-center\">\r\n                                    <Col className=\"make_pay_block_col mb-3 mb-md-0\">\r\n                                        <Row className=\"justify-content-center\">\r\n                                            <Col md={12}>\r\n                                                <Card className=\"bg_color_blue_white\">\r\n                                                    <Card.Body>\r\n                                                        <Form>\r\n                                                            <FormGroup className=\"mb-3\" controlId=\"formTransactionID\">\r\n                                                                <FormLabel>Transaction :</FormLabel>\r\n                                                            </FormGroup>\r\n                                                            <FormGroup as={Row} className=\"mb-3\" controlId=\"formTo\">\r\n                                                                <FormLabel column className='make_pay_lable' md={3}>To:</FormLabel>\r\n                                                                <Col className='make_pay_select_firm'>\r\n                                                                    <Form.Control\r\n                                                                        as=\"select\"\r\n                                                                        value={selectedToFirmId}\r\n                                                                        className=\"form-select\"\r\n                                                                        onChange={(e) => setSelectedToFirmId(e.target.value)}\r\n                                                                    >\r\n                                                                        <option value=\"\">Select Firm</option>\r\n                                                                        {firms.map((firm) => (\r\n                                                                            <option key={firm.firm_id} value={firm.firm_id}>{firm.firm_name}</option>\r\n                                                                        ))}\r\n                                                                    </Form.Control>\r\n                                                                </Col>\r\n                                                                <Col className='make_pay_select_acc'>\r\n                                                                    <Form.Control\r\n                                                                        as=\"select\"\r\n                                                                        value={selectedToGLId}\r\n                                                                        className=\"form-select\"\r\n                                                                        onChange={(e) => setSelectedToGLId(e.target.value)}\r\n                                                                        disabled={!selectedToFirmId || loadingToGL}\r\n                                                                    >\r\n                                                                        <option value=\"\">Select Your Firm Account</option>\r\n                                                                        {toGeneralLedgers.map((gl) => (\r\n                                                                            <option key={gl.gl_id} value={gl.gl_id}>{gl.gl_name}</option>\r\n                                                                        ))}\r\n                                                                    </Form.Control>\r\n                                                                </Col>\r\n                                                            </FormGroup>\r\n                                                            <FormGroup as={Row} className=\"mb-3\" controlId=\"formFrom\">\r\n                                                                <FormLabel column className='make_pay_lable' md={3}>From:</FormLabel>\r\n                                                                <Col className='make_pay_select_firm'>\r\n                                                                    <Form.Control\r\n                                                                        as=\"select\"\r\n                                                                        value={selectedFromFirmId}\r\n                                                                        className=\"form-select\"\r\n                                                                        onChange={(e) => setSelectedFromFirmId(e.target.value)}\r\n                                                                    >\r\n                                                                        <option value=\"\">Select Firm</option>\r\n                                                                        {firms.map((firm) => (\r\n                                                                            <option key={firm.firm_id} value={firm.firm_id}>{firm.firm_name}</option>\r\n                                                                        ))}\r\n                                                                    </Form.Control>\r\n                                                                </Col>\r\n                                                                <Col className='make_pay_select_acc'>\r\n                                                                    <Form.Control\r\n                                                                        as=\"select\"\r\n                                                                        value={selectedFromGLId}\r\n                                                                        className=\"form-select\"\r\n                                                                        onChange={(e) => setSelectedFromGLId(e.target.value)}\r\n                                                                        disabled={!selectedFromFirmId || loadingFromGL}\r\n                                                                    >\r\n                                                                        <option value=\"\">Select Your Firm Account</option>\r\n                                                                        {fromGeneralLedgers.map((gl) => (\r\n                                                                            <option key={gl.gl_id} value={gl.gl_id}>{gl.gl_name}</option>\r\n                                                                        ))}\r\n                                                                    </Form.Control>\r\n                                                                </Col>\r\n                                                            </FormGroup>\r\n                                                            <FormGroup as={Row} className=\"mb-3\" controlId=\"formAmount\">\r\n                                                                <FormLabel column className='make_pay_lable' md={3}>Amount:</FormLabel>\r\n                                                                <Col sm={4}>\r\n                                                                    <FormControl\r\n                                                                        type=\"text\"\r\n                                                                        placeholder='Enter Amount'\r\n                                                                        value={amount}\r\n                                                                        onChange={(e) => setAmount(e.target.value)}\r\n                                                                    />\r\n                                                                    {amountError && <p style={{ color: 'red' }}>{amountError}</p>} {/* Display the amount error */}\r\n                                                                </Col>\r\n                                                            </FormGroup>\r\n                                                            <FormGroup as={Row} className=\"mb-3\" controlId=\"formDate\">\r\n                                                                <FormLabel column className='make_pay_lable' md={3}>Date:</FormLabel>\r\n                                                                <Col sm={4}>\r\n                                                                    <DatePicker\r\n                                                                        selected={transactionDate}\r\n                                                                        onChange={(date) => setTransactionDate(date)}\r\n                                                                        showTimeSelect\r\n                                                                        dateFormat=\"MMMM d, yyyy h:mm aa\"\r\n                                                                        className=\"form-control\"\r\n                                                                    />\r\n                                                                </Col>\r\n                                                            </FormGroup>\r\n                                                            <FormGroup as={Row} className=\"mb-3\" controlId=\"formRemark\">\r\n                                                                <FormLabel column md={3}>Remark:</FormLabel>\r\n                                                                <Col sm={9}>\r\n                                                                    <FormControl\r\n                                                                        type=\"text\"\r\n                                                                        placeholder=\"Enter Remark\"\r\n                                                                        value={remark}\r\n                                                                        onChange={(e) => setRemark(e.target.value)}\r\n                                                                    />\r\n                                                                </Col>\r\n                                                            </FormGroup>\r\n\r\n                                                        </Form>\r\n                                                    </Card.Body>\r\n                                                </Card>\r\n                                                <Row className='justify-content-center align-content-center mt-3 cf_acc_bt_row'>\r\n                                                    <Button id=\"but_color\" onClick={handleSaveReceipt}>Create receipt</Button>\r\n                                                </Row>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Modal Component */}\r\n            <Modal show={showModal} onHide={() => setShowModal(false)} centered>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{modalTitle}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>{modalMessage}</Modal.Body>\r\n                <Modal.Footer>\r\n                    {modalButtonText === 'Confirm' ? (\r\n                        <>\r\n                            <Button variant=\"secondary\" onClick={() => setShowModal(false)}>Cancel</Button>\r\n                            <Button id=\"but_color\" onClick={confirmReceipt}>{modalButtonText}</Button>\r\n                        </>\r\n                    ) : (\r\n                        <Button id=\"but_color\" onClick={() => setShowModal(false)}>{modalButtonText}</Button>\r\n                    )}\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CreateReceipt;\r\n","const _excluded = [\"as\", \"disabled\"];\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function isTrivialHref(href) {\n  return !href || href.trim() === '#';\n}\nexport function useButtonProps({\n  tagName,\n  disabled,\n  href,\n  target,\n  rel,\n  role,\n  onClick,\n  tabIndex = 0,\n  type\n}) {\n  if (!tagName) {\n    if (href != null || target != null || rel != null) {\n      tagName = 'a';\n    } else {\n      tagName = 'button';\n    }\n  }\n  const meta = {\n    tagName\n  };\n  if (tagName === 'button') {\n    return [{\n      type: type || 'button',\n      disabled\n    }, meta];\n  }\n  const handleClick = event => {\n    if (disabled || tagName === 'a' && isTrivialHref(href)) {\n      event.preventDefault();\n    }\n    if (disabled) {\n      event.stopPropagation();\n      return;\n    }\n    onClick == null ? void 0 : onClick(event);\n  };\n  const handleKeyDown = event => {\n    if (event.key === ' ') {\n      event.preventDefault();\n      handleClick(event);\n    }\n  };\n  if (tagName === 'a') {\n    // Ensure there's a href so Enter can trigger anchor button.\n    href || (href = '#');\n    if (disabled) {\n      href = undefined;\n    }\n  }\n  return [{\n    role: role != null ? role : 'button',\n    // explicitly undefined so that it overrides the props disabled in a spread\n    // e.g. <Tag {...props} {...hookProps} />\n    disabled: undefined,\n    tabIndex: disabled ? undefined : tabIndex,\n    href,\n    target: tagName === 'a' ? target : undefined,\n    'aria-disabled': !disabled ? undefined : disabled,\n    rel: tagName === 'a' ? rel : undefined,\n    onClick: handleClick,\n    onKeyDown: handleKeyDown\n  }, meta];\n}\nconst Button = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n      as: asProp,\n      disabled\n    } = _ref,\n    props = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const [buttonProps, {\n    tagName: Component\n  }] = useButtonProps(Object.assign({\n    tagName: asProp,\n    disabled\n  }, props));\n  return /*#__PURE__*/_jsx(Component, Object.assign({}, props, buttonProps, {\n    ref: ref\n  }));\n});\nButton.displayName = 'Button';\nexport default Button;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useButtonProps } from '@restart/ui/Button';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Button = /*#__PURE__*/React.forwardRef(({\n  as,\n  bsPrefix,\n  variant = 'primary',\n  size,\n  active = false,\n  disabled = false,\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn');\n  const [buttonProps, {\n    tagName\n  }] = useButtonProps({\n    tagName: as,\n    disabled,\n    ...props\n  });\n  const Component = tagName;\n  return /*#__PURE__*/_jsx(Component, {\n    ...buttonProps,\n    ...props,\n    ref: ref,\n    disabled: disabled,\n    className: classNames(className, prefix, active && 'active', variant && `${prefix}-${variant}`, size && `${prefix}-${size}`, props.href && disabled && 'disabled')\n  });\n});\nButton.displayName = 'Button';\nexport default Button;"],"names":["api_url","CreateReceipt","user","useContext","UserContext","userId","firms","setFirms","useState","selectedFromFirmId","setSelectedFromFirmId","selectedToFirmId","setSelectedToFirmId","fromGeneralLedgers","setFromGeneralLedgers","toGeneralLedgers","setToGeneralLedgers","selectedFromGLId","setSelectedFromGLId","selectedToGLId","setSelectedToGLId","amount","setAmount","remark","setRemark","transactionDate","setTransactionDate","Date","loadingFromGL","setLoadingFromGL","loadingToGL","setLoadingToGL","amountError","setAmountError","showModal","setShowModal","modalTitle","setModalTitle","modalMessage","setModalMessage","modalButtonText","setModalButtonText","useEffect","async","response","fetch","concat","ok","Error","resdata","json","data","error","console","fetchFirms","fetchGeneralLedgers","firm_id","generalLedgers","loadGeneralLedgers","_jsxs","children","_jsx","AdminSidebar","className","AdminHeader","Row","Col","xs","Card","style","borderColor","marginLeft","src","receipts","width","height","alt","color","Link","to","Button","id","md","Body","Form","FormGroup","controlId","FormLabel","as","column","Control","value","onChange","e","target","map","firm","firm_name","disabled","gl","gl_id","gl_name","sm","FormControl","type","placeholder","DatePicker","selected","date","showTimeSelect","dateFormat","onClick","handleSaveReceipt","isNaN","Number","Modal","show","onHide","centered","Header","closeButton","Title","Footer","_Fragment","variant","payload","to_firm_id","to_gl_id","from_firm_id","from_gl_id","trans_type","transaction_date","toLocaleDateString","year","month","day","hour","minute","second","hour12","method","headers","body","JSON","stringify","result","log","setTimeout","window","location","reload","_excluded","useButtonProps","_ref2","tagName","href","rel","role","tabIndex","meta","handleClick","event","trim","isTrivialHref","preventDefault","stopPropagation","undefined","onKeyDown","key","React","_ref","ref","asProp","props","source","excluded","i","sourceKeys","Object","keys","length","indexOf","_objectWithoutPropertiesLoose","buttonProps","Component","assign","displayName","bsPrefix","size","active","prefix","useBootstrapPrefix","classNames"],"sourceRoot":""}