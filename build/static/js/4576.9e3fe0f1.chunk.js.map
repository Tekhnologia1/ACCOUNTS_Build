{"version":3,"file":"static/js/4576.9e3fe0f1.chunk.js","mappings":"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","sources":["api/APIURL.js","views/admin/Transfers/MakeTransfer.js","../node_modules/@restart/ui/esm/Button.js","../node_modules/react-bootstrap/esm/Button.js"],"sourcesContent":["export const api_url = 'http://20.235.178.6:3007';","import React, { useContext, useEffect, useState } from 'react';\r\nimport { Container, Row, Col, Form, FormGroup, FormLabel, FormControl, Button, Card, Modal } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { AdminSidebar, AdminHeader } from 'src/components';\r\nimport AllFirms_logo from 'src/assets/images/admin_dashboard_icons/AllFirms.png';\r\nimport { UserContext } from 'src/context/UserContextProvider';\r\nimport { api_url } from 'src/api/APIURL';\r\nimport transfers from 'src/assets/icons/sidebar_icons/transfers.png'\r\n\r\n\r\nconst MakeTransfer = () => {\r\n    const { user } = useContext(UserContext);\r\n    const userId = user.userId;\r\n\r\n    const [firms, setFirms] = useState([]);\r\n    const [selectedFromFirmId, setSelectedFromFirmId] = useState('');\r\n    const [selectedToFirmId, setSelectedToFirmId] = useState('');\r\n    const [fromGeneralLedgers, setFromGeneralLedgers] = useState([]);\r\n    const [toGeneralLedgers, setToGeneralLedgers] = useState([]);\r\n    const [selectedFromGLId, setSelectedFromGLId] = useState('');\r\n    const [selectedToGLId, setSelectedToGLId] = useState('');\r\n    const [amount, setAmount] = useState('');\r\n    const [remark, setRemark] = useState('');\r\n    const [loadingFromGL, setLoadingFromGL] = useState(false);\r\n    const [loadingToGL, setLoadingToGL] = useState(false);\r\n    const [errors, setErrors] = useState({}); // State for validation errors\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [modalTitle, setModalTitle] = useState('');\r\n    const [modalMessage, setModalMessage] = useState('');\r\n    const [modalButtonText, setModalButtonText] = useState('');\r\n\r\n    useEffect(() => {\r\n        const fetchFirms = async () => {\r\n            try {\r\n                const response = await fetch(`${api_url}/api/users/get_all_firms_by_user/${userId}`);\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to show firms');\r\n                }\r\n                const resdata = await response.json();\r\n                setFirms(resdata.data);\r\n            } catch (error) {\r\n                console.error('Error fetching firms:', error);\r\n            }\r\n        };\r\n        fetchFirms();\r\n    }, [userId]);\r\n\r\n    const fetchGeneralLedgers = async (firm_id) => {\r\n        try {\r\n            const response = await fetch(`${api_url}/api/users/get_general_ledgers/${firm_id}`);\r\n            if (!response.ok) {\r\n                throw new Error('Failed to show GL list');\r\n            }\r\n            const data = await response.json();\r\n            return data.data;\r\n        } catch (error) {\r\n            console.error('Error fetching GL list:', error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const loadGeneralLedgers = async () => {\r\n            if (selectedFromFirmId) {\r\n                setLoadingFromGL(true);\r\n                const generalLedgers = await fetchGeneralLedgers(selectedFromFirmId);\r\n                setFromGeneralLedgers(generalLedgers);\r\n                setLoadingFromGL(false);\r\n            }\r\n        };\r\n        loadGeneralLedgers();\r\n    }, [selectedFromFirmId]);\r\n\r\n    useEffect(() => {\r\n        const loadGeneralLedgers = async () => {\r\n            if (selectedToFirmId) {\r\n                setLoadingToGL(true);\r\n                const generalLedgers = await fetchGeneralLedgers(selectedToFirmId);\r\n                setToGeneralLedgers(generalLedgers);\r\n                setLoadingToGL(false);\r\n            }\r\n        };\r\n        loadGeneralLedgers();\r\n    }, [selectedToFirmId]);\r\n\r\n    const validateAmount = (amount) => {\r\n        const errors = {};\r\n        if (!amount) {\r\n            errors.amount = 'Amount is required';\r\n        } else if (isNaN(amount) || amount <= 0) {\r\n            errors.amount = 'Amount must be a positive number';\r\n        }\r\n        return errors;\r\n    };\r\n\r\n    const handleSavePayment = () => {\r\n        const validationErrors = validateAmount(amount);\r\n        if (Object.keys(validationErrors).length > 0) {\r\n            setErrors(validationErrors);\r\n            return;\r\n        }\r\n\r\n        setShowModal(true);\r\n        setModalTitle('Confirm Transaction');\r\n        setModalMessage('Are you sure you want to proceed with this Transaction?');\r\n        setModalButtonText('Confirm Transaction');\r\n    };\r\n\r\n    const confirmPayment = async () => {\r\n        try {\r\n            const payload = {\r\n                from_gl_id: selectedFromGLId,\r\n                to_gl_id: selectedToGLId,\r\n                amount: Number(amount),\r\n                from_firm_id: selectedFromFirmId,\r\n                to_firm_id: selectedToFirmId,\r\n                remark: remark\r\n            };\r\n\r\n            const response = await fetch(`${api_url}/api/users/payment/${userId}`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(payload)\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Failed to process this transaction');\r\n            }\r\n\r\n            const result = await response.json();\r\n            console.log(result);\r\n\r\n            // Show success modal\r\n            setShowModal(true);\r\n            setModalTitle('Transaction Status');\r\n            setModalMessage('Transaction Successful');\r\n            setModalButtonText('Close');\r\n\r\n            setTimeout(() => {\r\n                window.location.reload();\r\n            }, 1000);\r\n        } catch (error) {\r\n            console.error('Problem for processing transaction:', error);\r\n\r\n            // Show failure modal\r\n            setShowModal(true);\r\n            setModalTitle('Transaction Status');\r\n            setModalMessage('Transaction Failed');\r\n            setModalButtonText('Close');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <AdminSidebar />\r\n            <div className=\"wrapper d-flex flex-column min-vh-100 bg-light\">\r\n                <AdminHeader />\r\n                <Container fluid className=\"flex-grow-1 px-3 px-md-5\">\r\n                    <Row className='justify-content-center mb-3'>\r\n                        <Col md={12}>\r\n                            <Card className='card_border_color_change py-5' style={{ borderColor: \"white\" }}>\r\n                                <Row className='allfirms_title_mainrow'>\r\n                                    <Col md={8} style={{ marginLeft: \"10px\" }}>\r\n                                        <Row className='allfirms_title_row py-1 align-items-center'>\r\n                                            <Col md={1}>\r\n                                                <img className='' src={transfers} width={25} height={25} alt=\"AllFirms Logo\" />\r\n                                            </Col>\r\n                                            <Col md={5}>\r\n                                                <h4 className=\"mb-0\" style={{color: 'white'}}>Make Transaction</h4>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Col>\r\n                                    <Col md={3} className='d-flex align-items-center justify-content-end'>\r\n                                        <Link to={'/firm_transactions'}>\r\n                                            <Button id=\"but_color\">All Transactions</Button>\r\n                                        </Link>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <Row className='allfirms_table_row py-5 justify-content-center'>\r\n                                    <Col className=\"make_pay_block_col mb-3 mb-md-0\">\r\n                                        <Row className='justify-content-center'>\r\n                                            <Col md={12}>\r\n                                                <Card className='bg_color_blue_white'>\r\n                                                    <Card.Body>\r\n                                                        <Form>\r\n                                                            <FormGroup className=\"mb-3\" controlId=\"formTransactionID\">\r\n                                                                <FormLabel>Transaction :</FormLabel>\r\n                                                            </FormGroup>\r\n                                                            <FormGroup as={Row} className=\"mb-3\" controlId=\"formFrom\">\r\n                                                                <FormLabel column className='make_pay_lable' md={3}>From:</FormLabel>\r\n                                                                <Col className='make_pay_select_firm'>\r\n                                                                    <Form.Control\r\n                                                                        as=\"select\"\r\n                                                                        value={selectedFromFirmId}\r\n                                                                        className='form-select'\r\n                                                                        onChange={(e) => setSelectedFromFirmId(e.target.value)}\r\n                                                                    >\r\n                                                                        <option value=\"\">Select Firm</option>\r\n                                                                        {firms.map((firm) => (\r\n                                                                            <option key={firm.firm_id} value={firm.firm_id}>\r\n                                                                                {firm.firm_name}\r\n                                                                            </option>\r\n                                                                        ))}\r\n                                                                    </Form.Control>\r\n                                                                </Col>\r\n                                                                <Col className='make_pay_select_acc'>\r\n                                                                    <Form.Control\r\n                                                                        as=\"select\"\r\n                                                                        value={selectedFromGLId}\r\n                                                                        className='form-select'\r\n                                                                        onChange={(e) => setSelectedFromGLId(e.target.value)}\r\n                                                                        disabled={!selectedFromFirmId || loadingFromGL}\r\n                                                                    >\r\n                                                                        <option value=\"\">Select Your Firm Account</option>\r\n                                                                        {fromGeneralLedgers.map((gl) => (\r\n                                                                            <option key={gl.gl_id} value={gl.gl_id}>\r\n                                                                                {gl.gl_name}\r\n                                                                            </option>\r\n                                                                        ))}\r\n                                                                    </Form.Control>\r\n                                                                    {loadingFromGL && <p>Loading...</p>}\r\n                                                                </Col>\r\n                                                            </FormGroup>\r\n                                                            <FormGroup as={Row} className=\"mb-3\" controlId=\"formTo\">\r\n                                                                <FormLabel column className='make_pay_lable' md={3}>To:</FormLabel>\r\n                                                                <Col className='make_pay_select_firm'>\r\n                                                                    <Form.Control\r\n                                                                        as=\"select\"\r\n                                                                        value={selectedToFirmId}\r\n                                                                        className='form-select'\r\n                                                                        onChange={(e) => setSelectedToFirmId(e.target.value)}\r\n                                                                    >\r\n                                                                        <option value=\"\">Select Firm</option>\r\n                                                                        {firms.map((firm) => (\r\n                                                                            <option key={firm.firm_id} value={firm.firm_id}>\r\n                                                                                {firm.firm_name}\r\n                                                                            </option>\r\n                                                                        ))}\r\n                                                                    </Form.Control>\r\n                                                                </Col>\r\n                                                                <Col className='make_pay_select_acc'>\r\n                                                                    <Form.Control\r\n                                                                        as=\"select\"\r\n                                                                        value={selectedToGLId}\r\n                                                                        className='form-select'\r\n                                                                        onChange={(e) => setSelectedToGLId(e.target.value)}\r\n                                                                        disabled={!selectedToFirmId || loadingToGL}\r\n                                                                    >\r\n                                                                        <option value=\"\">Select Your Firm Account</option>\r\n                                                                        {toGeneralLedgers.map((gl) => (\r\n                                                                            <option key={gl.gl_id} value={gl.gl_id}>\r\n                                                                                {gl.gl_name}\r\n                                                                            </option>\r\n                                                                        ))}\r\n                                                                    </Form.Control>\r\n                                                                    {loadingToGL && <p>Loading...</p>}\r\n                                                                </Col>\r\n                                                            </FormGroup>\r\n                                                            <FormGroup as={Row} className=\"mb-3\" controlId=\"formAmount\">\r\n                                                                <FormLabel column sm={3}>Amount :</FormLabel>\r\n                                                                <Col sm={4}>\r\n                                                                    <FormControl\r\n                                                                        type=\"text\"\r\n                                                                        placeholder=\"Enter Amount\"\r\n                                                                        value={amount}\r\n                                                                        onChange={(e) => setAmount(e.target.value)}\r\n                                                                        isInvalid={!!errors.amount}\r\n                                                                    />\r\n                                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                                        {errors.amount}\r\n                                                                    </Form.Control.Feedback>\r\n                                                                </Col>\r\n                                                            </FormGroup>\r\n                                                            <FormGroup as={Row} className=\"mb-3\" controlId=\"formRemark\">\r\n                                                                <FormLabel column sm={3}>Remark :</FormLabel>\r\n                                                                <Col sm={9}>\r\n                                                                    <FormControl\r\n                                                                        type=\"text\"\r\n                                                                        placeholder=\"Enter Remark\"\r\n                                                                        value={remark}\r\n                                                                        onChange={(e) => setRemark(e.target.value)}\r\n                                                                    />\r\n                                                                </Col>\r\n                                                            </FormGroup>\r\n                                                        </Form>\r\n                                                    </Card.Body>\r\n                                                </Card>\r\n                                                <Row className='justify-content-center mt-3'>\r\n                                                    <Button className='col-md-4 col-6' id='but_color' onClick={handleSavePayment}>Process Transaction</Button>\r\n                                                </Row>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n\r\n            {/* Modal Component */}\r\n            <Modal show={showModal} onHide={() => setShowModal(false)} centered>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{modalTitle}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>{modalMessage}</Modal.Body>\r\n                <Modal.Footer>\r\n                    {modalButtonText === 'Confirm Transaction' ? (\r\n                        <>\r\n                            <Button variant=\"secondary\" onClick={() => setShowModal(false)}>Cancel</Button>\r\n                            <Button id=\"but_color\" onClick={confirmPayment}>{modalButtonText}</Button>\r\n                        </>\r\n                    ) : (\r\n                        <Button id=\"but_color\" onClick={() => setShowModal(false)}>{modalButtonText}</Button>\r\n                    )}\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MakeTransfer;\r\n","const _excluded = [\"as\", \"disabled\"];\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function isTrivialHref(href) {\n  return !href || href.trim() === '#';\n}\nexport function useButtonProps({\n  tagName,\n  disabled,\n  href,\n  target,\n  rel,\n  role,\n  onClick,\n  tabIndex = 0,\n  type\n}) {\n  if (!tagName) {\n    if (href != null || target != null || rel != null) {\n      tagName = 'a';\n    } else {\n      tagName = 'button';\n    }\n  }\n  const meta = {\n    tagName\n  };\n  if (tagName === 'button') {\n    return [{\n      type: type || 'button',\n      disabled\n    }, meta];\n  }\n  const handleClick = event => {\n    if (disabled || tagName === 'a' && isTrivialHref(href)) {\n      event.preventDefault();\n    }\n    if (disabled) {\n      event.stopPropagation();\n      return;\n    }\n    onClick == null ? void 0 : onClick(event);\n  };\n  const handleKeyDown = event => {\n    if (event.key === ' ') {\n      event.preventDefault();\n      handleClick(event);\n    }\n  };\n  if (tagName === 'a') {\n    // Ensure there's a href so Enter can trigger anchor button.\n    href || (href = '#');\n    if (disabled) {\n      href = undefined;\n    }\n  }\n  return [{\n    role: role != null ? role : 'button',\n    // explicitly undefined so that it overrides the props disabled in a spread\n    // e.g. <Tag {...props} {...hookProps} />\n    disabled: undefined,\n    tabIndex: disabled ? undefined : tabIndex,\n    href,\n    target: tagName === 'a' ? target : undefined,\n    'aria-disabled': !disabled ? undefined : disabled,\n    rel: tagName === 'a' ? rel : undefined,\n    onClick: handleClick,\n    onKeyDown: handleKeyDown\n  }, meta];\n}\nconst Button = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n      as: asProp,\n      disabled\n    } = _ref,\n    props = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const [buttonProps, {\n    tagName: Component\n  }] = useButtonProps(Object.assign({\n    tagName: asProp,\n    disabled\n  }, props));\n  return /*#__PURE__*/_jsx(Component, Object.assign({}, props, buttonProps, {\n    ref: ref\n  }));\n});\nButton.displayName = 'Button';\nexport default Button;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useButtonProps } from '@restart/ui/Button';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Button = /*#__PURE__*/React.forwardRef(({\n  as,\n  bsPrefix,\n  variant = 'primary',\n  size,\n  active = false,\n  disabled = false,\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn');\n  const [buttonProps, {\n    tagName\n  }] = useButtonProps({\n    tagName: as,\n    disabled,\n    ...props\n  });\n  const Component = tagName;\n  return /*#__PURE__*/_jsx(Component, {\n    ...buttonProps,\n    ...props,\n    ref: ref,\n    disabled: disabled,\n    className: classNames(className, prefix, active && 'active', variant && `${prefix}-${variant}`, size && `${prefix}-${size}`, props.href && disabled && 'disabled')\n  });\n});\nButton.displayName = 'Button';\nexport default Button;"],"names":["api_url","MakeTransfer","user","useContext","UserContext","userId","firms","setFirms","useState","selectedFromFirmId","setSelectedFromFirmId","selectedToFirmId","setSelectedToFirmId","fromGeneralLedgers","setFromGeneralLedgers","toGeneralLedgers","setToGeneralLedgers","selectedFromGLId","setSelectedFromGLId","selectedToGLId","setSelectedToGLId","amount","setAmount","remark","setRemark","loadingFromGL","setLoadingFromGL","loadingToGL","setLoadingToGL","errors","setErrors","showModal","setShowModal","modalTitle","setModalTitle","modalMessage","setModalMessage","modalButtonText","setModalButtonText","useEffect","async","response","fetch","concat","ok","Error","resdata","json","data","error","console","fetchFirms","fetchGeneralLedgers","firm_id","generalLedgers","loadGeneralLedgers","_jsxs","children","_jsx","AdminSidebar","className","AdminHeader","Container","fluid","Row","Col","md","Card","style","borderColor","marginLeft","src","transfers","width","height","alt","color","Link","to","Button","id","Body","Form","FormGroup","controlId","FormLabel","as","column","Control","value","onChange","e","target","map","firm","firm_name","disabled","gl","gl_id","gl_name","sm","FormControl","type","placeholder","isInvalid","Feedback","onClick","handleSavePayment","validationErrors","isNaN","validateAmount","Object","keys","length","Modal","show","onHide","centered","Header","closeButton","Title","Footer","_Fragment","variant","payload","from_gl_id","to_gl_id","Number","from_firm_id","to_firm_id","method","headers","body","JSON","stringify","result","log","setTimeout","window","location","reload","_excluded","useButtonProps","_ref2","tagName","href","rel","role","tabIndex","meta","handleClick","event","trim","isTrivialHref","preventDefault","stopPropagation","undefined","onKeyDown","key","React","_ref","ref","asProp","props","source","excluded","i","sourceKeys","indexOf","_objectWithoutPropertiesLoose","buttonProps","Component","assign","displayName","bsPrefix","size","active","prefix","useBootstrapPrefix","classNames"],"sourceRoot":""}