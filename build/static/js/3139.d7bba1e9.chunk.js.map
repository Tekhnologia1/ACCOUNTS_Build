{"version":3,"file":"static/js/3139.d7bba1e9.chunk.js","mappings":"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","sources":["api/APIURL.js","views/admin/Ledgers/Create_Ledger.js"],"sourcesContent":["export const api_url = 'http://65.1.108.30:3007';","import React, { useState, useEffect, useContext } from 'react';\r\nimport { CButton, CCard, CCol, CImage, CRow } from '@coreui/react';\r\nimport { AdminHeader, AdminSidebar } from 'src/components';\r\nimport AllFirms_logo from 'src/assets/images/admin_dashboard_icons/AllFirms.png';\r\nimport { Form, Button, Row, Col } from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport { UserContext } from 'src/context/UserContextProvider';\r\nimport { api_url } from 'src/api/APIURL';\r\n\r\nconst Create_Ledger = () => {\r\n    const { user } = useContext(UserContext);\r\n    const userId = user.userId;\r\n    const [firms, setFirms] = useState([]);\r\n    const [selectedFirmId, setSelectedFirmId] = useState('');\r\n    const [generalLedgerName, setGeneralLedgerName] = useState('');\r\n\r\n    const [glNameError, setGLNameError] = useState('');\r\n\r\n\r\n    const validateGLName = (e) => {\r\n        const name = e.target.value;\r\n\r\n        if (name.length === 0) {\r\n            setGLNameError('Name must not be blank.');\r\n            return false;\r\n        }\r\n\r\n        setGeneralLedgerName(name);\r\n        setGLNameError('');\r\n\r\n        const regex = /^[a-zA-Z\\s]+$/;\r\n        if (name.length < 2) {\r\n            setGLNameError('Name must be at least 2 characters long.');\r\n            return false;\r\n        } else if (regex.test(name)) {\r\n            setGLNameError('');\r\n            return true;\r\n        } else {\r\n            setGLNameError('Only letters and spaces are allowed.');\r\n            return false;\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchFirms = async () => {\r\n            try {\r\n                const response = await fetch(`${api_url}/api/users/get_all_firms_by_user/${userId}`);\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch data');\r\n                }\r\n                const resdata = await response.json();\r\n                setFirms(resdata.data);\r\n            } catch (error) {\r\n                console.error('Error fetching firms:', error);\r\n            }\r\n        };\r\n\r\n        fetchFirms();\r\n    }, [userId]);\r\n\r\n    const handleCreateLedger = async () => {\r\n        try {\r\n\r\n            if (!validateGLName({ target: { value: generalLedgerName } })) {\r\n                setGLNameError('Enter valid firm account name.');\r\n                return;\r\n            }\r\n\r\n            if (!selectedFirmId || !generalLedgerName) {\r\n                alert('Please select a firm and enter a general ledger name');\r\n                return;\r\n            }\r\n\r\n            const firm_id = selectedFirmId;\r\n            const response = await axios.post(`${api_url}/api/users/create_general_ledgers/${firm_id}`, {\r\n                gl_name: generalLedgerName\r\n            });\r\n\r\n            if (response.status === 201) {\r\n                alert('General ledger created successfully');\r\n                setGeneralLedgerName(''); // Reset the input after successful creation\r\n            }\r\n        } catch (error) {\r\n            console.error('Error creating general ledger:', error);\r\n            alert('Failed to create general ledger');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <AdminSidebar />\r\n            <div className=\"wrapper d-flex flex-column min-vh-100 bg-light\">\r\n                <AdminHeader />\r\n                <div className=\"body flex-grow-1 px-5\">\r\n                    <CRow className=\"justify-content-center mb-3\">\r\n                        <CCol md={12}>\r\n                            <CCard className=\"card_border_color_change py-5\" style={{ borderColor: \"white\" }}>\r\n                                <CRow className=\"allfirms_title_mainrow\">\r\n                                    <CCol md={9} style={{ marginLeft: \"10px\" }}>\r\n                                        <CRow className=\"allfirms_title_row py-1 align-items-center\">\r\n                                            <CCol md={1}>\r\n                                                <CImage className=\"\" src={AllFirms_logo} width={25} height={25} />\r\n                                            </CCol>\r\n                                            <CCol md={6}>\r\n                                                <h4>Create Firm Accounts</h4>\r\n                                            </CCol>\r\n                                        </CRow>\r\n                                    </CCol>\r\n                                </CRow>\r\n                                <CRow className=\"allfirms_table_row py-5 justify-content-center\">\r\n                                    <CCol md={10}>\r\n                                        <Form>\r\n                                            <Form.Group as={Row} className=\"mb-3\" controlId=\"formFirmName\">\r\n                                                <Form.Label column sm={3}>Firm Name</Form.Label>\r\n                                                <Col sm={6}>\r\n                                                    <Form.Control as=\"select\" value={selectedFirmId} className=\"form-select\" onChange={(e) => setSelectedFirmId(e.target.value)}>\r\n                                                        <option value=\"\">Select Firm</option>\r\n                                                        {firms.map((firm) => (\r\n                                                            <option key={firm.firm_id} value={firm.firm_id}>\r\n                                                                {firm.firm_name}\r\n                                                            </option>\r\n                                                        ))}\r\n                                                    </Form.Control>\r\n                                                </Col>\r\n                                            </Form.Group>\r\n                                            <Form.Group as={Row} className=\"mb-3\" controlId=\"formGeneralLedgerName\">\r\n                                                <Form.Label column sm={3}>Firm Account Name</Form.Label>\r\n                                                <Col sm={6}>\r\n                                                    <Form.Control type=\"text\" value={generalLedgerName} onChange={validateGLName} />\r\n                                                    <div style={{ color: 'green', fontSize: '14px' }}>[Firm Account Name can be Expense or Salary or Person Name like 'Aditya', 'Megha']</div>\r\n                                                    {glNameError && <div className=\"text-danger mb-2\">{glNameError}</div>}\r\n                                                </Col>\r\n                                                <Col sm={2}>\r\n                                                    <Button variant=\"primary\" id=\"but_color\" onClick={handleCreateLedger}>Create</Button>\r\n                                                </Col>\r\n                                            </Form.Group>\r\n                                            {/* <Form.Group as={Row} className=\"mb-3\" controlId=\"formStatus\">\r\n                                                <Form.Label column sm={3}>Status</Form.Label>\r\n                                                <Col sm={6}>\r\n                                                    <Form.Control type=\"text\" placeholder=\"Active\" disabled />\r\n                                                </Col>\r\n                                            </Form.Group> */}\r\n                                        </Form>\r\n                                    </CCol>\r\n                                </CRow>\r\n                            </CCard>\r\n                        </CCol>\r\n                    </CRow>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Create_Ledger;\r\n"],"names":["api_url","Create_Ledger","user","useContext","UserContext","userId","firms","setFirms","useState","selectedFirmId","setSelectedFirmId","generalLedgerName","setGeneralLedgerName","glNameError","setGLNameError","validateGLName","e","name","target","value","length","test","useEffect","async","response","fetch","concat","ok","Error","resdata","json","data","error","console","fetchFirms","_jsxs","children","_jsx","AdminSidebar","className","AdminHeader","CRow","CCol","md","CCard","style","borderColor","marginLeft","CImage","src","AllFirms_logo","width","height","Form","Group","as","Row","controlId","Label","column","sm","Col","Control","onChange","map","firm","firm_id","firm_name","type","color","fontSize","Button","variant","id","onClick","alert","axios","post","gl_name","status"],"sourceRoot":""}